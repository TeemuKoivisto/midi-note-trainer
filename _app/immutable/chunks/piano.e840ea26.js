var g=Object.defineProperty;var v=(a,t,s)=>t in a?g(a,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[t]=s;var i=(a,t,s)=>(v(a,typeof t!="symbol"?t+"":t,s),s);const m=""+new URL("../assets/21.dc3c2e85.mp3",import.meta.url).href,G=""+new URL("../assets/33.1b1ff663.mp3",import.meta.url).href,A=""+new URL("../assets/45.b8744b82.mp3",import.meta.url).href,B=""+new URL("../assets/57.09c40d98.mp3",import.meta.url).href,L=""+new URL("../assets/69.11c384d7.mp3",import.meta.url).href,w=""+new URL("../assets/81.bc7d85dc.mp3",import.meta.url).href,R=""+new URL("../assets/93.a39f1834.mp3",import.meta.url).href,x=""+new URL("../assets/105.0ce83a41.mp3",import.meta.url).href,q=""+new URL("../assets/damper.391ddc72.mp3",import.meta.url).href,T=""+new URL("../assets/Piano Impulse6.43259355.mp3",import.meta.url).href;class U{constructor(t,s,e){i(this,"context");i(this,"urlList");i(this,"onload");i(this,"bufferList",[]);i(this,"loadCount",0);this.context=t,this.urlList=s,this.onload=e}loadBuffer(t,s){const e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="arraybuffer";const n=this;e.onload=function(){n.context.decodeAudioData(e.response,function(o){if(!o){console.error("error decoding file data: "+t);return}n.bufferList[s]=o,++n.loadCount==n.urlList.length&&n.onload(n.bufferList)})},e.onerror=function(){console.error("BufferLoader: XHR error")},e.send()}load(){for(let t=0;t<this.urlList.length;++t)this.loadBuffer(this.urlList[t],t)}}class F{constructor(t,s){i(this,"noteA");i(this,"noteB");i(this,"gainA");i(this,"gainB");i(this,"gain");i(this,"biquadFilter");i(this,"damp");i(this,"piano");this.piano=s,this.noteA=s.context.createBufferSource(),this.noteB=s.context.createBufferSource(),this.gainA=s.context.createGain(),this.gainB=s.context.createGain(),this.gain=s.context.createGain(),this.biquadFilter=s.context.createBiquadFilter(),this.biquadFilter.type="lowpass",this.biquadFilter.connect(s.directGain),this.gain.connect(this.biquadFilter),this.gainA.connect(this.gain),this.noteA.connect(this.gainA),this.gainB.connect(this.gain),this.noteB.connect(this.gainB),t<90&&(this.damp=s.context.createBufferSource(),this.damp.buffer=s.damper,this.damp.connect(this.piano.directGain))}on(t,s,e,n,o,r,c,h){this.noteA.buffer=this.piano.bufferlists[t],this.noteA.playbackRate.value=e,this.biquadFilter.frequency.value=o,this.gainA.gain.value=r,this.gain.gain.value=h,this.piano.bufferlists[s]?(this.noteB.buffer=this.piano.bufferlists[s],this.noteB.playbackRate.value=n,this.gainB.gain.value=c,this.noteB.start(0)):this.noteB=null,this.noteA.start(0)}off(){this.noteA.stop(0),this.noteB.stop(0)}}class b{constructor(t){i(this,"context");i(this,"convolver");i(this,"directGain");i(this,"convGain");i(this,"convGainAfter");i(this,"bufferlists",[]);i(this,"damper");i(this,"sus",!1);i(this,"sustained",[]);i(this,"notes",{});i(this,"bufferLoader");this.context=t,this.convolver=t.createConvolver(),this.directGain=t.createGain(),this.convGain=t.createGain(),this.convGainAfter=t.createGain(),this.convGain.connect(this.convolver),this.convolver.connect(this.convGainAfter),this.convGainAfter.connect(t.destination),this.directGain.connect(t.destination),this.directGain.connect(this.convGain),this.directGain.gain.value=.5,this.convGain.gain.value=0,this.convGainAfter.gain.value=0,this.bufferLoader=new U(t,[m,G,A,B,L,w,R,x,q,T],s=>{this.bufferlists=s,this.damper=s[8],this.convolver.buffer=s[9]}),this.bufferLoader.load()}noteOn(t,s){if(console.log("play note"),t<109&&t>20){this.notes[t]&&(this.notes[t].gain.gain.setTargetAtTime(0,this.context.currentTime,1.1),this.notes[t].noteA.stop(this.context.currentTime+2),this.notes[t].noteB.stop(this.context.currentTime+2),this.notes[t].damp=void 0,this.sustained.splice(this.sustained.indexOf(t),1));const e=Math.floor((t-21)/12),n=e+1,o=e*12+21,r=2**((t-69)/12)*440,c=s/127;let h=r*(2-(t-21)/50)+3*r*c;t<60&&(h=440*(3-(60-21)/50)+3*r*c);const f=2,l=Math.pow(2,(t-o)/12),u=0,d=0,p=c**1.4;this.notes[t]=new F(t,this),this.notes[t].on(e,n,l,u,h,f,d,p)}}noteOff(t){this.sus?this.sustained.push(t):(t<90&&(this.notes[t].gain.gain.setTargetAtTime(0,this.context.currentTime+.03,.08),this.notes[t].noteA.stop(this.context.currentTime+2),this.notes[t].noteB.stop(this.context.currentTime+2),this.notes[t].damp.start(0)),delete this.notes[t])}sustain(t){if(t==127)this.sus=!0,this.convGain.gain.value=1,this.convGainAfter.gain.value=1;else if(t==0){this.sus=!1,this.convGain.gain.value=0,this.convGainAfter.gain.value=0;for(let s=0;s<this.sustained.length;s++)this.notes[this.sustained[s]]&&this.noteOff(this.sustained[s]);this.sustained=[]}}}export{b as P};
