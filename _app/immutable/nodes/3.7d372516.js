var yt=Object.defineProperty;var Nt=(i,e,t)=>e in i?yt(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var ge=(i,e,t)=>(Nt(i,typeof e!="symbol"?e+"":e,t),t);import{f as vt,s as Ge,e as le,n as W,c as St,u as wt,g as Mt,d as It,h as xe,r as Xe,i as Be,j as ke,b as lt,o as At}from"../chunks/scheduler.5c0f2340.js";import{S as He,i as Ve,e as Ue,a as U,p as pt,t as ue,b as Et,d as me,f as y,g as b,h as _,j as A,k as g,m as F,n as z,x as c,o as oe,s as C,c as T,y as G,z as Y,A as De,r as Ye,u as qe,v as Ke,w as We}from"../chunks/index.25c5d01b.js";import{w as Ie}from"../chunks/index.f6288f2c.js";import{P as Ct}from"../chunks/piano.2fabdde4.js";class ee{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==!0}addListener(e,t,n={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==ee.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof t!="function")throw new TypeError("The callback must be a function.");const r=new ot(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return e===void 0?this.eventMap[ee.ANY_EVENT]&&this.eventMap[ee.ANY_EVENT].length>0?!0:Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[e]&&this.eventMap[e].length>0?t instanceof ot?this.eventMap[e].filter(r=>r===t).length>0:typeof t=="function"?this.eventMap[e].filter(r=>r.callback===t).length>0:t==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[ee.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(s=>{if(s.suspended)return;let a=[...t];Array.isArray(s.arguments)&&(a=a.concat(s.arguments)),s.remaining>0&&(n.push(s.callback.apply(s.context,a)),s.count++),--s.remaining<1&&s.remove()}),n}removeListener(e,t,n={}){if(e===void 0){this.eventMap={};return}else if(!this.eventMap[e])return;let r=this.eventMap[e].filter(s=>t&&s.callback!==t||n.remaining&&n.remaining!==s.remaining||n.context&&n.context!==s.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let s,a=this.addListener(e,()=>{clearTimeout(s),n()},{remaining:1});t.duration!==1/0&&(s=setTimeout(()=>{a.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class ot{constructor(e,t,n,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==ee.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments!==void 0&&!Array.isArray(r.arguments)&&(r.arguments=[r.arguments]),r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r),r.duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class l{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),l.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),l.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),l.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),l.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class we{constructor(e,t={}){this.duration=h.defaults.note.duration,this.attack=h.defaults.note.attack,this.release=h.defaults.note.release,t.duration!=null&&(this.duration=t.duration),t.attack!=null&&(this.attack=t.attack),t.rawAttack!=null&&(this.attack=f.from7bitToFloat(t.rawAttack)),t.release!=null&&(this.release=t.release),t.rawRelease!=null&&(this.release=f.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=f.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=f.getNoteDetails(e);if(h.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(h.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(h.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(h.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(h.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return f.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=f.from7bitToFloat(e)}get rawRelease(){return f.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=f.from7bitToFloat(e)}get number(){return f.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return h.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+e*12+t,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class f{static toNoteNumber(e,t=0){if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");const r={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let s=(n.octave+1+t)*12;if(s+=r[n.name],n.accidental&&(n.accidental.startsWith("b")?s-=n.accidental.length:s+=n.accidental.length),s<0||s>127)throw new RangeError("Invalid octaveOffset value");return s}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let s=t[2].toLowerCase();return s=s===""?void 0:s,{accidental:s,identifier:n+(s||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(h.validation){if(e==="all")t=["all"];else if(e==="none")return[]}return Array.isArray(e)?t=e:t=[e],t.indexOf("all")>-1&&(t=l.MIDI_CHANNEL_NUMBERS),t.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(e){let t=!1;const n=parseFloat(e);return isNaN(n)?!1:(typeof e=="string"&&e.substring(0,1)==="+"?n>=0&&(t=h.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if(typeof e=="string"||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch{return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=Math.floor(e/12-1)+t;return n[e%12]+r.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof we)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new we(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{n.push(this.buildNote(r,t))}),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(e*127),0),127)}static fromMsbLsbToFloat(e,t=0){h.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){h.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(e*16383);return{msb:t>>7,lsb:t&127}}static offsetNumber(e,t=0,n=0){if(h.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+t*12+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}static getCcNameByNumber(e){if(!(h.validation&&(e=parseInt(e),!(e>=0&&e<=127))))return l.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let t=l.CONTROL_CHANGE_MESSAGES.find(n=>n.name===e);return t?t.number:l.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in l.CHANNEL_MODE_MESSAGES)if(l.CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===l.CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&typeof window.document<"u"}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Tt extends ee{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(h.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=f.fromFloatTo7Bit(t));const r=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),f.buildNoteArray(e).forEach(s=>{this.send([(l.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),s.getOffsetNumber(r),t],{time:f.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if(typeof e=="string"&&(e=f.getCcNumberByName(e)),Array.isArray(t)||(t=[t]),h.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(t=t.map(r=>{const s=Math.min(Math.max(parseInt(r),0),127);if(isNaN(s))throw new TypeError("Values must be integers between 0 and 127");return s}),t.length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach((r,s)=>{this.send([(l.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+s*32,t[s]],{time:f.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2?this:(this.sendControlChange(38,e[1],t),this)}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=l.REGISTERED_PARAMETERS[e]),h.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(l.REGISTERED_PARAMETERS).forEach(r=>{l.REGISTERED_PARAMETERS[r][0]===e[0]&&l.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=l.REGISTERED_PARAMETERS[e]),h.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(l.REGISTERED_PARAMETERS).forEach(r=>{l.REGISTERED_PARAMETERS[r][0]===e[0]&&l.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){this.sendNoteOn(e,t);const n=Array.isArray(e)?e:[e];for(let r of n)if(parseInt(r.duration)>0){const s={time:(f.toTimestamp(t.time)||h.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,s)}else if(parseInt(t.duration)>0){const s={time:(f.toTimestamp(t.time)||h.time)+parseInt(t.duration),release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(r,s)}return this}sendNoteOff(e,t={}){if(h.validation){if(t.rawRelease!=null&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(t.release!=null&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawRelease!=null?n=t.rawRelease:isNaN(t.release)||(n=Math.round(t.release*127));const r=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return f.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(s=>{this.send([(l.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),s.getOffsetNumber(r),s.rawRelease],{time:f.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(h.validation){if(t.rawAttack!=null&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(t.attack!=null&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawAttack!=null?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(t.attack*127));const r=h.octaveOffset+this.output.octaveOffset+this.octaveOffset;return f.buildNoteArray(e,{rawAttack:n}).forEach(s=>{this.send([(l.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),s.getOffsetNumber(r),s.rawAttack],{time:f.toTimestamp(t.time)})}),this}sendChannelMode(e,t=0,n={}){if(typeof e=="string"&&(e=l.CHANNEL_MODE_MESSAGES[e]),h.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(l.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:f.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(h.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return t.rawValue||(e=f.fromFloatTo7Bit(e)),this.send([(l.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e)],{time:f.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,h.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let s=r>>7&127,a=r&127;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[s,a],t),this}sendModulationRange(e,t,n={}){if(h.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(t!=null&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),h.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(h.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const s=f.fromFloatToMsbLsb((e+1)/2);n=s.msb,r=s.lsb}return this.send([(l.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:f.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(h.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,h.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(l.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:f.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=l.REGISTERED_PARAMETERS[e]),h.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(h.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(h.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return e==="mono"?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Qe extends ee{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Tt(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:h.time};e.port.connection==="open"?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n=0){if(e instanceof gt&&(e=f.isNode?e.data:e.rawData),e instanceof Uint8Array&&f.isNode&&(e=Array.from(e)),h.validation){if(!Array.isArray(e)&&!(e instanceof Uint8Array)&&(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(r=parseInt(r),!(r>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,f.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=l.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=l.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,l.SYSTEM_MESSAGES.sysexend);this.send([l.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():h.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(h.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([l.SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){e=Math.floor(e)||0;var n=e>>7&127,r=e&127;return this.send([l.SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(h.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([l.SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([l.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([l.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([l.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([l.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([l.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([l.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([l.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return h.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,t,n)}),this}sendControlChange(e,t,n={},r={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendControlChange(e,t,n)}),this}sendPitchBendRange(e=0,t=0,n={}){return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,t,n)}),this}setPitchBendRange(e=0,t=0,n="all",r={}){return h.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(e,t,n)}),this}setRegisteredParameter(e,t=[],n="all",r={}){return h.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,t)}),this}sendPitchBend(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPitchBend(e,t)}),this}sendProgramChange(e=0,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendProgramChange(e,t)}),this}sendModulationRange(e,t,n={}){return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(e,t,n)}),this}setModulationRange(e=0,t=0,n="all",r={}){return h.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendMasterTuning(e,t)}),this}setMasterTuning(e,t={},n={}){return h.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningProgram(e,t)}),this}setTuningProgram(e,t="all",n={}){return h.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningBank(e,t)}),this}setTuningBank(e,t="all",n={}){return h.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(h.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendChannelMode(e,t,n)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},t={}){if(h.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const n=e;e=t,e.channels=n,e.channels==="all"&&(e.channels=l.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,t)}),this}sendLocalControl(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendLocalControl(e,t)}),this}sendOmniMode(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendOmniMode(e,t)}),this}sendNrpnValue(e,t,n={}){return n.channels==null&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,t,n)}),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return h.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnIncrement(e,t)}),this}incrementRegisteredParameter(e,t="all",n={}){return h.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnDecrement(e,t)}),this}decrementRegisteredParameter(e,t="all",n={}){return h.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=l.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(h.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(h.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=l.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class ct{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(l.SYSTEM_MESSAGES),...Object.keys(l.CHANNEL_MESSAGES)],this.channels=l.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),h.validation&&(e.forEach(n=>{if(!(n instanceof Qe))throw new TypeError("Destinations must be of type 'Output'.")}),t.types!==void 0&&t.types.forEach(n=>{if(!l.SYSTEM_MESSAGES.hasOwnProperty(n)&&!l.CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),t.channels!==void 0&&t.channels.forEach(n=>{if(!l.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(t=>{h.validation&&!(t instanceof Qe)||t.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Rt extends ee{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if(t.type==="noteoff"||t.type==="noteon"&&r===0)this.notesState[n]=!1,t.type="noteoff",t.note=new we(f.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+h.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=f.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if(t.type==="noteon")this.notesState[n]=!0,t.note=new we(f.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+h.octaveOffset),{rawAttack:r}),t.value=f.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if(t.type==="keyaftertouch")t.note=new we(f.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+h.octaveOffset)),t.value=f.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if(t.type==="controlchange"){t.controller={number:n,name:l.CONTROL_CHANGE_MESSAGES[n].name,description:l.CONTROL_CHANGE_MESSAGES[n].description,position:l.CONTROL_CHANGE_MESSAGES[n].position},t.subtype=t.controller.name||"controller"+n,t.value=f.from7bitToFloat(r),t.rawValue=r;const s=Object.assign({},t);s.type=`${t.type}-controller${n}`,delete s.subtype,this.emit(s.type,s);const a=Object.assign({},t);a.type=`${t.type}-`+l.CONTROL_CHANGE_MESSAGES[n].name,delete a.subtype,a.type.indexOf("controller")!==0&&this.emit(a.type,a),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else t.type==="programchange"?(t.value=n,t.rawValue=t.value):t.type==="channelaftertouch"?(t.value=f.from7bitToFloat(n),t.rawValue=n):t.type==="pitchbend"?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,t.type==="localcontrol"&&(t.value=t.message.data[2]===127,t.rawValue=t.message.data[2]),t.type==="omnimodeon"?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="omnimodeoff"&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),t.type==="monomodeon"?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="polymodeon"&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1];t===99||t===101?(this._nrpnBuffer=[],this._rpnBuffer=[],t===99?this._nrpnBuffer=[e.message]:n!==127&&(this._rpnBuffer=[e.message])):t===98||t===100?t===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):(t===6||t===38||t===96||t===97)&&(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===6||e===38||e===96||e===97||e===98||e===99||e===100||e===101}_dispatchParameterNumberEvent(e,t,n,r){e=e==="nrpn"?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:f.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};e==="rpn"?s.parameter=Object.keys(l.REGISTERED_PARAMETERS).find(o=>l.REGISTERED_PARAMETERS[o][0]===t&&l.REGISTERED_PARAMETERS[o][1]===n):s.parameter=(t<<7)+n;const a=l.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;s.type=`${e}-${a}`,this.emit(s.type,s);const d=Object.assign({},s);d.type==="nrpn-dataincrement"?d.type="nrpn-databuttonincrement":d.type==="nrpn-datadecrement"?d.type="nrpn-databuttondecrement":d.type==="rpn-dataincrement"?d.type="rpn-databuttonincrement":d.type==="rpn-datadecrement"&&(d.type="rpn-databuttondecrement"),this.emit(d.type,d),s.type=e,s.subtype=a,this.emit(s.type,s)}getChannelModeByNumber(e){return h.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),f.getChannelModeByNumber(e)}getCcNameByNumber(e){if(h.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),e=parseInt(e),!(e>=0&&e<=127)))throw new RangeError("Invalid control change number.");return f.getCcNameByNumber(e)}getNoteState(e){e instanceof we&&(e=e.identifier);const t=f.guessNoteNumber(e,h.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class gt{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=(this.statusByte&15)+1):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=f.getPropertyByValue(l.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=f.getPropertyByValue(l.SYSTEM_MESSAGES,this.command)),this.statusByte===l.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Ot extends ee{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new Rt(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:h.time,target:this,port:this};e.port.connection==="open"?(t.type="opened",this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new gt(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(t))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage",t.type==="songselect"&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){h.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(h.validation&&typeof n=="function"){let r=t!=null?[].concat(t):void 0;t=n,n={channels:r}}if(l.CHANNEL_EVENTS.includes(e)){n.channels===void 0&&(n.channels=l.MIDI_CHANNEL_NUMBERS);let r=[];return f.sanitizeChannels(n.channels).forEach(s=>{r.push(this.channels[s].addListener(e,t,n))}),r}else return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(h.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}return l.CHANNEL_EVENTS.includes(e)?(n.channels===void 0&&(n.channels=l.MIDI_CHANNEL_NUMBERS),f.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(e,t))):super.hasListener(e,t)}removeListener(e,t,n={}){if(h.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}if(n.channels===void 0&&(n.channels=l.MIDI_CHANNEL_NUMBERS),e==null)return f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();l.CHANNEL_EVENTS.includes(e)?f.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return e instanceof ct?n=e:n=new ct(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter(t=>t!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return h.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Dt extends ee{constructor(){super(),this.defaults={note:{attack:f.from7bitToFloat(64),release:f.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(f.isNode){try{window.navigator}catch{let d=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)();global.navigator||(global.navigator={}),Object.assign(global.navigator,d)}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=e.validation!==!1,this.validation&&(typeof e=="function"&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return typeof e.callback=="function"&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{typeof e.requestMIDIAccessFunction=="function"?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(a){return n.error=a,this.emit("error",n),typeof e.callback=="function"&&e.callback(a),Promise.reject(a)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(a){return n.error=a,this.emit("error",n),typeof e.callback=="function"&&e.callback(a),Promise.reject(a)}return this.emit("enabled",s),typeof e.callback=="function"&&e.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(this._disconnectedInputs[n].id===e.toString())return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(this.inputs[n].id===e.toString())return this.inputs[n]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(~this._disconnectedInputs[n].name.indexOf(e))return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(~this.inputs[n].name.indexOf(e))return this.inputs[n]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(~this._disconnectedOutputs[n].name.indexOf(e))return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(~this.outputs[n].name.indexOf(e))return this.outputs[n]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(this._disconnectedOutputs[n].id===e.toString())return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(this.outputs[n].id===e.toString())return this.outputs[n]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),f.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127?f.getNoteDetails(f.offsetNumber(e,this.octaveOffset)).octave:!1}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),f.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),f.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),f.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),f.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),f.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(t=>e.push(t.destroy())),this.outputs.forEach(t=>e.push(t.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if(e.port.state==="connected"&&e.port.connection==="open"){e.port.type==="output"?t.port=this.getOutputById(e.port.id):e.port.type==="input"&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if(e.port.state==="disconnected"&&e.port.connection==="pending"){e.port.type==="input"?t.port=this.getInputById(e.port.id,{disconnected:!0}):e.port.type==="output"&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const n=this._inputs[t];Array.from(this.interface.inputs.values()).find(s=>s===n._midiInput)||(this._disconnectedInputs.push(n),this._inputs.splice(t,1))}let e=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(n=>n._midiInput===t)){let n=this._disconnectedInputs.find(r=>r._midiInput===t);n||(n=new Ot(t)),this._inputs.push(n),e.push(n.open())}}),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const n=this._outputs[t];Array.from(this.interface.outputs.values()).find(s=>s===n._midiOutput)||(this._disconnectedOutputs.push(n),this._outputs.splice(t,1))}let e=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(n=>n._midiOutput===t)){let n=this._disconnectedOutputs.find(r=>r._midiOutput===t);n||(n=new Qe(t)),this._outputs.push(n),e.push(n.open())}}),Promise.all(e)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),f.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),f.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&navigator.requestMIDIAccess}get sysexEnabled(){return!!(this.interface&&this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.8"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),l.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),l.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),l.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),l.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),l.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const h=new Dt;h.constructor=null;function xt(i,e){try{const t=e==="local"?window.localStorage:window.sessionStorage;return{data:JSON.parse(t.getItem(i)||"")}}catch(t){return{err:`Failed to retrieve value from storage: ${t}`,code:400}}}function Bt(i,e,t){try{return(t==="local"?window.localStorage:window.sessionStorage).setItem(e,JSON.stringify(i)),{data:void 0}}catch(n){return{err:`Failed to store the value: ${n}`,code:400}}}function Ze(i,e){const{key:t,storage:n="local"}=e,r=xt(t,n);return"data"in r&&r.data?i.set(e.deserialize?e.deserialize(r.data):r.data):"err"in r&&(e!=null&&e.debug)&&console.info(r.err),i.subscribe(s=>{const a=Bt(e.serialize?e.serialize(s):s,t,n);"err"in a&&(e!=null&&e.debug)&&console.error(a.err)}),i}const Ae=Ie(void 0),$e=Ze(Ie([60,84]),{key:"midi-range",storage:"session"}),Le=Ie(void 0),et=Ze(Ie(!1),{key:"use-sound"}),tt=Ze(Ie(!1),{key:"use-keyboard"});et.subscribe(i=>{if(i){const e=new Ct(new AudioContext);e.load(),Le.set(e)}else Le.set(void 0)});const Me={async openMidi(){return h.enable().then(()=>h.inputs.length>0?(Ae.set(h.inputs[0]),{data:h.inputs[0]}):{err:"No MIDI device found.",code:400}).catch(i=>({err:i.toString(),code:403}))},setMidiRange(i){$e.set(i)},setUseKeyboard(i){tt.set(i)},setSound(i){et.set(i)}};class kt{constructor(e,t){ge(this,"type");ge(this,"notes");ge(this,"times",[]);ge(this,"correct",0);ge(this,"idx",0);ge(this,"timing");this.type=e,this.notes=t,this.timing=performance.now()}get current(){return this.notes[this.idx]}get ended(){return this.notes.length===this.idx+1}get avgTime(){let e=0;for(let t=0;t<this.times.length;t+=1)e+=this.times[t];return Math.round(e/10/this.times.length)/100}guess(e){const t=this.current===e;return t&&(this.correct+=1),this.idx+=1,this.times.push(performance.now()-this.timing),t}startTime(){this.timing=performance.now()}}const Pe=Ie(void 0),Je={playGuessNotes(i,e=10){const t=[],n=vt($e);for(let s=0;s<e;s+=1){let a=0,d=n[1];for(;a<5;)a+=1,d=n[0]+Math.floor(Math.random()*(n[1]-n[0]+1)),t.includes(d)||(a=5);t.push(d)}const r=new kt(i,t);return Pe.set(r),r},clearGame(){Pe.set(void 0)}};function Ut(i){let e,t=i[1]&&dt(i);return{c(){e=b("div"),t&&t.c(),this.h()},l(n){e=_(n,"DIV",{class:!0});var r=A(e);t&&t.l(r),r.forEach(y),this.h()},h(){g(e,"class","flex")},m(n,r){U(n,e,r),t&&t.m(e,null)},p(n,r){n[1]?t?t.p(n,r):(t=dt(n),t.c(),t.m(e,null)):t&&(t.d(1),t=null)},i:W,o:W,d(n){n&&y(e),t&&t.d()}}}function Lt(i){let e,t,n,r;const s=[Ht,Gt,Pt],a=[];function d(o,u){return o[3].type==="pitches"&&o[2]==="waiting"?0:o[2]==="correct"||o[2]==="wrong"?1:o[2]==="ended"?2:-1}return~(t=d(i))&&(n=a[t]=s[t](i)),{c(){e=b("div"),n&&n.c(),this.h()},l(o){e=_(o,"DIV",{class:!0});var u=A(e);n&&n.l(u),u.forEach(y),this.h()},h(){g(e,"class","flex")},m(o,u){U(o,e,u),~t&&a[t].m(e,null),r=!0},p(o,u){let N=t;t=d(o),t===N?~t&&a[t].p(o,u):(n&&(pt(),ue(a[N],1,1,()=>{a[N]=null}),Et()),~t?(n=a[t],n?n.p(o,u):(n=a[t]=s[t](o),n.c()),me(n,1),n.m(e,null)):n=null)},i(o){r||(me(n),r=!0)},o(o){ue(n),r=!1},d(o){o&&y(e),~t&&a[t].d()}}}function dt(i){let e,t,n=i[1].absolute+"",r;return{c(){e=b("div"),t=F("Played: "),r=F(n)},l(s){e=_(s,"DIV",{});var a=A(e);t=z(a,"Played: "),r=z(a,n),a.forEach(y)},m(s,a){U(s,e,a),c(e,t),c(e,r)},p(s,a){a&2&&n!==(n=s[1].absolute+"")&&oe(r,n)},d(s){s&&y(e)}}}function Pt(i){let e,t,n,r,s=i[3].correct+"",a,d,o=i[3].notes.length+"",u,N,m,w,I,D=i[3].avgTime+"",x,k,v,E;const S=i[6].default,O=St(S,i,i[5],null);return{c(){e=b("div"),t=b("div"),n=b("span"),r=F("Result: ["),a=F(s),d=F(" / "),u=F(o),N=F("]"),m=C(),w=b("span"),I=F("avg "),x=F(D),k=F("s"),v=C(),O&&O.c()},l(p){e=_(p,"DIV",{});var M=A(e);t=_(M,"DIV",{});var B=A(t);n=_(B,"SPAN",{});var H=A(n);r=z(H,"Result: ["),a=z(H,s),d=z(H," / "),u=z(H,o),N=z(H,"]"),H.forEach(y),m=T(B),w=_(B,"SPAN",{});var L=A(w);I=z(L,"avg "),x=z(L,D),k=z(L,"s"),L.forEach(y),B.forEach(y),v=T(M),O&&O.l(M),M.forEach(y)},m(p,M){U(p,e,M),c(e,t),c(t,n),c(n,r),c(n,a),c(n,d),c(n,u),c(n,N),c(t,m),c(t,w),c(w,I),c(w,x),c(w,k),c(e,v),O&&O.m(e,null),E=!0},p(p,M){(!E||M&8)&&s!==(s=p[3].correct+"")&&oe(a,s),(!E||M&8)&&o!==(o=p[3].notes.length+"")&&oe(u,o),(!E||M&8)&&D!==(D=p[3].avgTime+"")&&oe(x,D),O&&O.p&&(!E||M&32)&&wt(O,S,p,p[5],E?It(S,p[5],M,null):Mt(p[5]),null)},i(p){E||(me(O,p),E=!0)},o(p){ue(O,p),E=!1},d(p){p&&y(e),O&&O.d(p)}}}function Gt(i){var N,m;let e,t,n=((N=i[0])==null?void 0:N.absolute)+"",r,s,a,d,o=((m=i[1])==null?void 0:m.absolute)+"",u;return{c(){e=b("div"),t=F("Target: "),r=F(n),s=C(),a=b("div"),d=F("Played: "),u=F(o),this.h()},l(w){e=_(w,"DIV",{});var I=A(e);t=z(I,"Target: "),r=z(I,n),I.forEach(y),s=T(w),a=_(w,"DIV",{class:!0});var D=A(a);d=z(D,"Played: "),u=z(D,o),D.forEach(y),this.h()},h(){g(a,"class","ml-8")},m(w,I){U(w,e,I),c(e,t),c(e,r),U(w,s,I),U(w,a,I),c(a,d),c(a,u)},p(w,I){var D,x;I&1&&n!==(n=((D=w[0])==null?void 0:D.absolute)+"")&&oe(r,n),I&2&&o!==(o=((x=w[1])==null?void 0:x.absolute)+"")&&oe(u,o)},i:W,o:W,d(w){w&&(y(e),y(s),y(a))}}}function Ht(i){let e,t,n="Replay",r,s;return{c(){e=b("div"),t=b("button"),t.textContent=n,this.h()},l(a){e=_(a,"DIV",{});var d=A(e);t=_(d,"BUTTON",{class:!0,"data-svelte-h":!0}),G(t)!=="svelte-14wwgqx"&&(t.textContent=n),d.forEach(y),this.h()},h(){g(t,"class","btn primary")},m(a,d){U(a,e,d),c(e,t),r||(s=Y(t,"click",i[4]),r=!0)},p:W,i:W,o:W,d(a){a&&y(e),r=!1,s()}}}function Vt(i){let e,t,n,r;const s=[Lt,Ut],a=[];function d(o,u){return o[3]?0:1}return e=d(i),t=a[e]=s[e](i),{c(){t.c(),n=Ue()},l(o){t.l(o),n=Ue()},m(o,u){a[e].m(o,u),U(o,n,u),r=!0},p(o,[u]){let N=e;e=d(o),e===N?a[e].p(o,u):(pt(),ue(a[N],1,1,()=>{a[N]=null}),Et(),t=a[e],t?t.p(o,u):(t=a[e]=s[e](o),t.c()),me(t,1),t.m(n.parentNode,n))},i(o){r||(me(t),r=!0)},o(o){ue(t),r=!1},d(o){o&&y(n),a[e].d(o)}}}function Ft(i,e,t){let n,r;le(i,Pe,m=>t(3,n=m)),le(i,Le,m=>t(7,r=m));let{$$slots:s={},$$scope:a}=e,{target:d,played:o,guessState:u}=e;function N(){r==null||r.noteOn(n.current,80)}return i.$$set=m=>{"target"in m&&t(0,d=m.target),"played"in m&&t(1,o=m.played),"guessState"in m&&t(2,u=m.guessState),"$$scope"in m&&t(5,a=m.$$scope)},[d,o,u,n,N,a,s]}class zt extends He{constructor(e){super(),Ve(this,e,Ft,Vt,Ge,{target:0,played:1,guessState:2})}}const bt={0:{note:"C",steps:0,sharp:!1,flat:!1},1:{note:"C♯",steps:0,sharp:!0,flat:!1},2:{note:"D",steps:1,sharp:!1,flat:!1},3:{note:"E♭",steps:2,sharp:!1,flat:!0},4:{note:"E",steps:2,sharp:!1,flat:!1},5:{note:"F",steps:3,sharp:!1,flat:!1},6:{note:"F♯",steps:3,sharp:!0,flat:!1},7:{note:"G",steps:4,sharp:!1,flat:!1},8:{note:"G♯",steps:4,sharp:!0,flat:!1},9:{note:"A",steps:5,sharp:!1,flat:!1},10:{note:"B♭",steps:6,sharp:!1,flat:!0},11:{note:"B",steps:6,sharp:!1,flat:!1}};function ae(i){const e=i-12,t=Math.floor(e/12),n=bt[e%12];return{...n,octave:t,absolute:`${n.note}${t}`}}function _t(i){if(i.length===2||i.length===3){const e=i.slice(0,i.length-1).toUpperCase();let t;try{t=parseInt(i[i.length-1])}catch{return{err:`Couldn't parse note "${i}" octave`,code:400}}const n=Object.values(bt).findIndex(r=>r.note===e);return n===-1?{err:`Note "${i}" not found in scale`,code:400}:{data:12+t*12+n}}else return{err:`Unrecognized note "${i}"`,code:400}}function ht(i){let e,t;return{c(){e=b("div"),t=F(i[2]),this.h()},l(n){e=_(n,"DIV",{class:!0});var r=A(e);t=z(r,i[2]),r.forEach(y),this.h()},h(){g(e,"class","error svelte-haigqy")},m(n,r){U(n,e,r),c(e,t)},p(n,r){r&4&&oe(t,n[2])},d(n){n&&y(e)}}}function jt(i){let e,t,n,r="MIDI",s,a,d,o,u="Device",N,m,w,I,D,x,k="Prompt",v,E,S,O="Range",p,M,B,H,L,re="—",pe,V,be,J,q,Z,_e="Use MIDI",Q,$,K,te="Sound",ne,R,se,Fe,ce,de,nt="Keyboard",ze,ye,ie,Ce,je,rt,j=i[2]&&ht(i);return{c(){e=b("div"),t=b("fieldset"),n=b("legend"),n.textContent=r,s=C(),a=b("div"),d=b("div"),o=b("label"),o.textContent=u,N=C(),m=b("input"),I=C(),D=b("div"),x=b("button"),x.textContent=k,v=C(),E=b("div"),S=b("label"),S.textContent=O,p=C(),M=b("div"),B=b("input"),H=C(),L=b("span"),L.textContent=re,pe=C(),V=b("input"),be=C(),J=b("div"),j&&j.c(),q=C(),Z=b("button"),Z.textContent=_e,Q=C(),$=b("div"),K=b("label"),K.textContent=te,ne=C(),R=b("div"),se=b("input"),Fe=C(),ce=b("div"),de=b("label"),de.textContent=nt,ze=C(),ye=b("div"),ie=b("input"),this.h()},l(P){e=_(P,"DIV",{class:!0});var X=A(e);t=_(X,"FIELDSET",{class:!0});var Ee=A(t);n=_(Ee,"LEGEND",{class:!0,"data-svelte-h":!0}),G(n)!=="svelte-dnpakp"&&(n.textContent=r),s=T(Ee),a=_(Ee,"DIV",{class:!0});var he=A(a);d=_(he,"DIV",{class:!0});var Ne=A(d);o=_(Ne,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),G(o)!=="svelte-crpa7y"&&(o.textContent=u),N=T(Ne),m=_(Ne,"INPUT",{class:!0,id:!0}),I=T(Ne),D=_(Ne,"DIV",{});var st=A(D);x=_(st,"BUTTON",{class:!0,"data-svelte-h":!0}),G(x)!=="svelte-r53s7o"&&(x.textContent=k),st.forEach(y),Ne.forEach(y),v=T(he),E=_(he,"DIV",{class:!0});var ve=A(E);S=_(ve,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),G(S)!=="svelte-10u0679"&&(S.textContent=O),p=T(ve),M=_(ve,"DIV",{class:!0});var Se=A(M);B=_(Se,"INPUT",{class:!0,id:!0}),H=T(Se),L=_(Se,"SPAN",{class:!0,"data-svelte-h":!0}),G(L)!=="svelte-91k20l"&&(L.textContent=re),pe=T(Se),V=_(Se,"INPUT",{class:!0,id:!0}),Se.forEach(y),be=T(ve),J=_(ve,"DIV",{});var Te=A(J);j&&j.l(Te),q=T(Te),Z=_(Te,"BUTTON",{class:!0,"data-svelte-h":!0}),G(Z)!=="svelte-1elgafa"&&(Z.textContent=_e),Te.forEach(y),ve.forEach(y),Q=T(he),$=_(he,"DIV",{class:!0});var Re=A($);K=_(Re,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),G(K)!=="svelte-wgxtkw"&&(K.textContent=te),ne=T(Re),R=_(Re,"DIV",{class:!0});var it=A(R);se=_(it,"INPUT",{class:!0,id:!0,type:!0}),it.forEach(y),Re.forEach(y),Fe=T(he),ce=_(he,"DIV",{class:!0});var Oe=A(ce);de=_(Oe,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),G(de)!=="svelte-1js269u"&&(de.textContent=nt),ze=T(Oe),ye=_(Oe,"DIV",{class:!0});var at=A(ye);ie=_(at,"INPUT",{class:!0,id:!0,type:!0}),at.forEach(y),Oe.forEach(y),he.forEach(y),Ee.forEach(y),X.forEach(y),this.h()},h(){var P;g(n,"class","px-2 text-0A text-base"),g(o,"class","font-bold"),g(o,"for","device"),g(m,"class","my-1 w-50"),g(m,"id","device"),m.disabled=!0,m.value=w=((P=i[3])==null?void 0:P.name)??"No device",g(x,"class","btn primary"),g(d,"class","flex flex-col"),g(S,"class","font-bold"),g(S,"for","range_min"),g(B,"class","w-full"),g(B,"id","range_min"),g(L,"class","mx-4"),g(V,"class","w-full"),g(V,"id","range_max"),g(M,"class","my-1 flex w-full"),g(Z,"class","btn primary"),g(E,"class","flex flex-col"),g(K,"class","font-bold"),g(K,"for","sound"),g(se,"class","h-[20px]"),g(se,"id","sound"),g(se,"type","checkbox"),se.checked=i[4],g(R,"class","my-1 flex"),g($,"class","flex flex-col h-full"),g(de,"class","font-bold"),g(de,"for","keyboard"),g(ie,"class","h-[20px]"),g(ie,"id","keyboard"),g(ie,"type","checkbox"),ie.checked=i[5],g(ye,"class","my-1 flex"),g(ce,"class","flex flex-col h-full"),g(a,"class","midi-body svelte-haigqy"),g(t,"class","flex flex-col rounded border-2 px-4 py-2 my-4 text-sm"),g(e,"class",Ce=xe(`${i[9].class||""}`)+" svelte-haigqy")},m(P,X){U(P,e,X),c(e,t),c(t,n),c(t,s),c(t,a),c(a,d),c(d,o),c(d,N),c(d,m),c(d,I),c(d,D),c(D,x),c(a,v),c(a,E),c(E,S),c(E,p),c(E,M),c(M,B),De(B,i[0]),c(M,H),c(M,L),c(M,pe),c(M,V),De(V,i[1]),c(E,be),c(E,J),j&&j.m(J,null),c(J,q),c(J,Z),c(a,Q),c(a,$),c($,K),c($,ne),c($,R),c(R,se),c(a,Fe),c(a,ce),c(ce,de),c(ce,ze),c(ce,ye),c(ye,ie),je||(rt=[Y(x,"click",Me.openMidi),Y(B,"input",i[10]),Y(B,"change",i[11]),Y(V,"input",i[12]),Y(V,"change",i[13]),Y(Z,"click",Yt),Y(se,"change",i[7]),Y(ie,"change",i[8])],je=!0)},p(P,[X]){var Ee;X&8&&w!==(w=((Ee=P[3])==null?void 0:Ee.name)??"No device")&&m.value!==w&&(m.value=w),X&1&&B.value!==P[0]&&De(B,P[0]),X&2&&V.value!==P[1]&&De(V,P[1]),P[2]?j?j.p(P,X):(j=ht(P),j.c(),j.m(J,q)):j&&(j.d(1),j=null),X&16&&(se.checked=P[4]),X&32&&(ie.checked=P[5]),X&512&&Ce!==(Ce=xe(`${P[9].class||""}`)+" svelte-haigqy")&&g(e,"class",Ce)},i:W,o:W,d(P){P&&y(e),j&&j.d(),je=!1,Xe(rt)}}}function Yt(){}function qt(i,e,t){let n,r,s,a;le(i,$e,v=>t(14,n=v)),le(i,Ae,v=>t(3,r=v)),le(i,et,v=>t(4,s=v)),le(i,tt,v=>t(5,a=v));let d=ae(n[0]).absolute,o=ae(n[1]).absolute,u="";function N(v,E){const S=_t(E.currentTarget.value);if("data"in S){const O=n,p=[v==="min"?S.data:O[0],v==="max"?S.data:O[1]];Me.setMidiRange(p),t(2,u="")}else t(2,u=S.err),v==="min"?t(0,d=ae(n[0]).absolute):t(1,o=ae(n[1]).absolute)}function m(v){Me.setSound(v.currentTarget.checked)}function w(v){Me.setUseKeyboard(v.currentTarget.checked)}function I(){d=this.value,t(0,d)}const D=v=>N("min",v);function x(){o=this.value,t(1,o)}const k=v=>N("max",v);return i.$$set=v=>{t(9,e=Be(Be({},e),ke(v)))},e=ke(e),[d,o,u,r,s,a,N,m,w,e,I,D,x,k]}class Kt extends He{constructor(e){super(),Ve(this,e,qt,jt,Ge,{})}}function Wt(i){let e,t,n,r,s,a,d,o,u,N,m,w,I,D,x,k,v,E,S,O,p,M,B,H,L,re="𝄞",pe,V,be="𝄢",J,q,Z='<div class="note-contents"></div> <div class="ledger-line svelte-xnzxzu"></div>',_e,Q,$='<div class="note-contents"></div> <div class="ledger-line svelte-xnzxzu"></div>',K;return{c(){e=b("section"),t=b("div"),n=b("div"),r=C(),s=b("div"),a=C(),d=b("div"),o=C(),u=b("div"),N=C(),m=b("div"),w=C(),I=b("div"),D=C(),x=b("div"),k=C(),v=b("div"),E=C(),S=b("div"),O=C(),p=b("div"),M=C(),B=b("div"),H=C(),L=b("span"),L.textContent=re,pe=C(),V=b("span"),V.textContent=be,J=C(),q=b("div"),q.innerHTML=Z,_e=C(),Q=b("div"),Q.innerHTML=$,this.h()},l(te){e=_(te,"SECTION",{class:!0});var ne=A(e);t=_(ne,"DIV",{class:!0});var R=A(t);n=_(R,"DIV",{class:!0}),A(n).forEach(y),r=T(R),s=_(R,"DIV",{class:!0}),A(s).forEach(y),a=T(R),d=_(R,"DIV",{class:!0}),A(d).forEach(y),o=T(R),u=_(R,"DIV",{class:!0}),A(u).forEach(y),N=T(R),m=_(R,"DIV",{class:!0}),A(m).forEach(y),w=T(R),I=_(R,"DIV",{class:!0}),A(I).forEach(y),D=T(R),x=_(R,"DIV",{class:!0}),A(x).forEach(y),k=T(R),v=_(R,"DIV",{class:!0}),A(v).forEach(y),E=T(R),S=_(R,"DIV",{class:!0}),A(S).forEach(y),O=T(R),p=_(R,"DIV",{class:!0}),A(p).forEach(y),M=T(R),B=_(R,"DIV",{class:!0}),A(B).forEach(y),H=T(R),L=_(R,"SPAN",{class:!0,"data-svelte-h":!0}),G(L)!=="svelte-19670ev"&&(L.textContent=re),pe=T(R),V=_(R,"SPAN",{class:!0,"data-svelte-h":!0}),G(V)!=="svelte-119te60"&&(V.textContent=be),J=T(R),q=_(R,"DIV",{class:!0,"data-svelte-h":!0}),G(q)!=="svelte-1avvn9p"&&(q.innerHTML=Z),_e=T(R),Q=_(R,"DIV",{class:!0,"data-svelte-h":!0}),G(Q)!=="svelte-1rv4bt9"&&(Q.innerHTML=$),R.forEach(y),ne.forEach(y),this.h()},h(){g(n,"class","line svelte-xnzxzu"),g(s,"class","line svelte-xnzxzu"),g(d,"class","line svelte-xnzxzu"),g(u,"class","line svelte-xnzxzu"),g(m,"class","line svelte-xnzxzu"),g(I,"class","line invisible svelte-xnzxzu"),g(x,"class","line svelte-xnzxzu"),g(v,"class","line svelte-xnzxzu"),g(S,"class","line svelte-xnzxzu"),g(p,"class","line svelte-xnzxzu"),g(B,"class","line svelte-xnzxzu"),g(L,"class","g-clef svelte-xnzxzu"),g(V,"class","f-clef svelte-xnzxzu"),g(q,"class","note target svelte-xnzxzu"),g(Q,"class","note played svelte-xnzxzu"),g(t,"class","staff svelte-xnzxzu"),g(e,"class",K=xe(`${i[2].class||""} score pt-12 pb-8`)+" svelte-xnzxzu")},m(te,ne){U(te,e,ne),c(e,t),c(t,n),c(t,r),c(t,s),c(t,a),c(t,d),c(t,o),c(t,u),c(t,N),c(t,m),c(t,w),c(t,I),c(t,D),c(t,x),c(t,k),c(t,v),c(t,E),c(t,S),c(t,O),c(t,p),c(t,M),c(t,B),c(t,H),c(t,L),c(t,pe),c(t,V),c(t,J),c(t,q),i[5](q),c(t,_e),c(t,Q),i[6](Q)},p(te,[ne]){ne&4&&K!==(K=xe(`${te[2].class||""} score pt-12 pb-8`)+" svelte-xnzxzu")&&g(e,"class",K)},i:W,o:W,d(te){te&&y(e),i[5](null),i[6](null)}}}function ft(i,e,t){e?(i.style.display="block",i.style.bottom=Jt(e)+"rem",i.firstChild&&(i.firstChild.textContent=`${e.flat?"♭":e.sharp?"♯":""}𝅝`),t!==void 0&&t?(i.classList.remove("wrong"),i.classList.add("correct")):t!==void 0&&(i.classList.remove("correct"),i.classList.add("wrong")),(e.value===60||e.value===61)&&i.lastChild instanceof HTMLElement||e.value===81&&i.lastChild instanceof HTMLElement?(i.lastChild.style.display="block",e.flat||e.sharp?i.lastChild.style.left="1.18rem":i.lastChild.style.left=""):i.lastChild instanceof HTMLElement&&(i.lastChild.style.display="none")):i.style.display="none"}function Jt(i){const e=.42272727272,n=(i.octave-4)*7+i.steps;return 2.85+e*n}function Qt(i,e,t){let{target:n=void 0,played:r=void 0}=e,s,a;function d(u){lt[u?"unshift":"push"](()=>{a=u,t(1,a)})}function o(u){lt[u?"unshift":"push"](()=>{s=u,t(0,s)})}return i.$$set=u=>{t(2,e=Be(Be({},e),ke(u))),"target"in u&&t(3,n=u.target),"played"in u&&t(4,r=u.played)},i.$$.update=()=>{i.$$.dirty&10&&a&&ft(a,n),i.$$.dirty&17&&s&&ft(s,r,r==null?void 0:r.correct)},e=ke(e),[s,a,e,n,r,d,o]}class Xt extends He{constructor(e){super(),Ve(this,e,Qt,Wt,Ge,{target:3,played:4})}}const Zt={wholeTone:[0,2,2,2,2,2,2],major:[0,2,2,1,2,2,2],major7s4s5:[0,2,2,2,2,1,2],ionian:[0,2,2,1,2,2,2],aeolian:[0,2,1,2,2,1,2],dorian:[0,2,1,2,2,2,1],phrygian:[0,1,2,2,2,1,2],lydian:[0,2,2,2,1,2,2],lydianDominant:[0,2,2,2,1,2,1],acoustic:[0,2,2,2,1,2,1],mixolydian:[0,2,2,1,2,2,1],mixolydianFlat6:[0,2,2,1,2,1,2],locrian:[0,1,2,2,1,2,2],superLocrian:[0,1,2,1,2,2,2],minor:[0,2,1,2,2,1,2],minor7b9:[0,1,2,2,2,2,1],minor7b5:[0,2,1,2,1,2,2],halfDiminished:[0,2,1,2,1,2,2],harmonicMajor:[0,2,2,1,2,1,3],harmonicMinor:[0,2,1,2,2,1,3],doubleHarmonic:[0,1,3,1,2,1,3],byzantine:[0,1,3,1,2,1,3],melodicMinorAscending:[0,2,1,2,2,2,2],melodicMinorDescending:[0,2,2,1,2,2,1],majorPentatonic:[0,2,2,3,2],majorPentatonicBlues:[0,2,1,1,3,2],minorPentatonic:[0,3,2,2,3],minorPentatonicBlues:[0,3,2,1,1,3],b5Pentatonic:[0,3,2,1,4,2],minor6Pentatonic:[0,3,2,2,2,3],enigmaticMajor:[0,1,3,2,2,2,1],enigmaticMinor:[0,1,2,3,1,3,1],dim8Tone:[0,2,1,2,1,2,1,2],dom8Tone:[0,1,2,1,2,1,2,1],neapolitanMajor:[0,1,2,2,2,2,2],neapolitanMinor:[0,1,2,2,2,1,3],hungarianMajor:[0,3,1,2,1,2,1],hungarianMinor:[0,2,1,3,1,1,3],hungarianGypsy:[0,1,3,1,2,1,3],spanish:[0,1,2,1,2,2,2],spanish8Tone:[0,1,2,1,1,1,2,2],jewish:[0,1,2,1,1,1,2,2],spanishGypsy:[0,1,3,1,2,1,2],augmented:[0,3,1,3,1,3,1],dominantSuspended:[0,2,3,2,2,1,2],bebopMajor:[0,2,2,1,2,1,1,2],bebopDominant:[0,2,2,1,2,2,1,1],mystic:[0,2,2,2,3,2],overtone:[0,2,2,2,1,1,2],leadingTone:[0,2,2,2,2,2,1],hirojoshi:[0,2,1,4,1],japaneseA:[0,1,4,1,3],japaneseB:[0,2,3,1,3],oriental:[0,1,3,1,1,3,1],persian:[0,1,4,1,2,3],arabian:[0,2,2,1,1,2,2],balinese:[0,1,2,4,1],kumoi:[0,2,1,4,2,2],pelog:[0,1,2,3,1,1],algerian:[0,2,1,2,1,1,1,3],chinese:[0,4,2,1,4],mongolian:[0,2,2,3,2],egyptian:[0,2,3,2,3],romainian:[0,2,1,3,1,2,1],hindu:[0,2,2,1,2,1,2],insen:[0,1,4,2,3],iwato:[0,1,4,1,4],scottish:[0,2,3,2,2],yo:[0,3,2,2,3],istrian:[0,1,2,2,2,1,2],ukranianDorian:[0,2,1,3,1,2,1],petrushka:[0,1,3,2,1,3],ahavaraba:[0,1,3,1,2,1,2]},fe=[{note:"C",steps:0,black:!1,sharp:!1,flat:!1},{note:"C♯",steps:0,black:!0,sharp:!0,flat:!1},{note:"D",steps:1,black:!1,sharp:!1,flat:!1},{note:"E♭",steps:2,black:!0,sharp:!1,flat:!0},{note:"E",steps:2,black:!1,sharp:!1,flat:!1},{note:"F",steps:3,black:!1,sharp:!1,flat:!1},{note:"F♯",steps:3,black:!0,sharp:!0,flat:!1},{note:"G",steps:4,black:!1,sharp:!1,flat:!1},{note:"G♯",steps:4,black:!0,sharp:!0,flat:!1},{note:"A",steps:5,black:!1,sharp:!1,flat:!1},{note:"B♭",steps:6,black:!0,sharp:!1,flat:!0},{note:"B",steps:6,black:!1,sharp:!1,flat:!1}],$t=/^[a-gA-G][♭b#♯]?$/;function en(i,e){const t=Zt[e];if($t.test(i)){if(!t)return{err:`Unknown scale: ${e}`,code:400}}else return{err:`Unknown key: ${i}`,code:400};let n=i.toUpperCase();n.length>1&&(n=n[0]+n[1].replace("B","♭").replace("#","♯"));let r=fe.findIndex(u=>u.note===n);const s=n.charAt(1)==="♭",a=n.charAt(1)==="♯",d=[];r===-1?(r=fe.findIndex(u=>u.note.charAt(0)===n.charAt(0)),r=s?(r-1)%12:r+1,d.push({...fe[r],flat:s,sharp:a,note:n})):d.push(fe[r]);const o=[d[0].note.charAt(0)];for(let u=1;u<t.length;u+=1){r=(r+t[u])%12;const N=fe[r];if(N.sharp&&s){const m=fe[(r+1)%12];d.push({...N,note:m.note.charAt(0)+"♭",flat:!0})}else if(N.flat&&a){const m=fe[(r-1)%12];d.push({...N,note:m.note.charAt(0)+"♯",sharp:!0})}else if(o.includes(N.note.charAt(0))){const m=fe[(r-1)%12];d.push({...N,note:m.note.charAt(0)+"♯",sharp:!0})}else d.push(N);o.push(d[d.length-1].note.charAt(0))}return{data:d}}function tn(i){let e,t,n="Guess 10 Notes",r,s,a="Guess 10 Pitches",d,o,u="Clear",N,m;return{c(){e=b("div"),t=b("button"),t.textContent=n,r=C(),s=b("button"),s.textContent=a,d=C(),o=b("button"),o.textContent=u,this.h()},l(w){e=_(w,"DIV",{});var I=A(e);t=_(I,"BUTTON",{class:!0,"data-svelte-h":!0}),G(t)!=="svelte-1dix09m"&&(t.textContent=n),r=T(I),s=_(I,"BUTTON",{class:!0,"data-svelte-h":!0}),G(s)!=="svelte-1c8h8hw"&&(s.textContent=a),d=T(I),o=_(I,"BUTTON",{class:!0,"data-svelte-h":!0}),G(o)!=="svelte-11mnk9v"&&(o.textContent=u),I.forEach(y),this.h()},h(){g(t,"class","btn primary"),g(s,"class","btn primary"),g(o,"class","btn primary")},m(w,I){U(w,e,I),c(e,t),c(e,r),c(e,s),c(e,d),c(e,o),N||(m=[Y(t,"click",i[10]),Y(s,"click",i[11]),Y(o,"click",i[9])],N=!0)},p:W,d(w){w&&y(e),N=!1,Xe(m)}}}function nn(i){let e,t,n="Try Again",r,s,a="Clear",d,o;return{c(){e=b("div"),t=b("button"),t.textContent=n,r=C(),s=b("button"),s.textContent=a,this.h()},l(u){e=_(u,"DIV",{});var N=A(e);t=_(N,"BUTTON",{class:!0,"data-svelte-h":!0}),G(t)!=="svelte-y911ux"&&(t.textContent=n),r=T(N),s=_(N,"BUTTON",{class:!0,"data-svelte-h":!0}),G(s)!=="svelte-11mnk9v"&&(s.textContent=a),N.forEach(y),this.h()},h(){g(t,"class","btn primary"),g(s,"class","btn primary")},m(u,N){U(u,e,N),c(e,t),c(e,r),c(e,s),d||(o=[Y(t,"click",i[8]),Y(s,"click",i[9])],d=!0)},p:W,d(u){u&&y(e),d=!1,Xe(o)}}}function ut(i){let e;function t(s,a){if(s[3])return sn;if(s[4])return rn}let n=t(i),r=n&&n(i);return{c(){r&&r.c(),e=Ue()},l(s){r&&r.l(s),e=Ue()},m(s,a){r&&r.m(s,a),U(s,e,a)},p(s,a){n===(n=t(s))&&r?r.p(s,a):(r&&r.d(1),r=n&&n(s),r&&(r.c(),r.m(e.parentNode,e)))},d(s){s&&y(e),r&&r.d(s)}}}function rn(i){let e,t,n;return{c(){e=b("div"),t=F("Input: "),n=F(i[4])},l(r){e=_(r,"DIV",{});var s=A(e);t=z(s,"Input: "),n=z(s,i[4]),s.forEach(y)},m(r,s){U(r,e,s),c(e,t),c(e,n)},p(r,s){s&16&&oe(n,r[4])},d(r){r&&y(e)}}}function sn(i){let e,t;return{c(){e=b("div"),t=F(i[3])},l(n){e=_(n,"DIV",{});var r=A(e);t=z(r,i[3]),r.forEach(y)},m(n,r){U(n,e,r),c(e,t)},p(n,r){r&8&&oe(t,n[3])},d(n){n&&y(e)}}}function an(i){let e,t="MIDI Music Notation Trainer",n,r,s,a,d,o,u,N,m,w,I,D,x;s=new Kt({});let k=Ae&&tn(i);o=new Xt({props:{class:"px-4 md:px-0",target:i[0],played:i[1]}}),m=new zt({props:{target:i[0],played:i[1],guessState:i[2],$$slots:{default:[nn]},$$scope:{ctx:i}}});let v=i[5]&&ut(i);return{c(){e=b("h1"),e.textContent=t,n=C(),r=b("section"),Ye(s.$$.fragment),a=C(),k&&k.c(),d=C(),Ye(o.$$.fragment),u=C(),N=b("section"),Ye(m.$$.fragment),w=C(),v&&v.c(),this.h()},l(E){e=_(E,"H1",{class:!0,"data-svelte-h":!0}),G(e)!=="svelte-jm0jbv"&&(e.textContent=t),n=T(E),r=_(E,"SECTION",{class:!0});var S=A(r);qe(s.$$.fragment,S),a=T(S),k&&k.l(S),S.forEach(y),d=T(E),qe(o.$$.fragment,E),u=T(E),N=_(E,"SECTION",{class:!0});var O=A(N);qe(m.$$.fragment,O),w=T(O),v&&v.l(O),O.forEach(y),this.h()},h(){g(e,"class","my-8 md:text-5xl mt-12 px-4 md:px-0 text-3xl font-cursive tracking-tight"),g(r,"class","px-4 md:px-0"),g(N,"class","px-4 md:px-0")},m(E,S){U(E,e,S),U(E,n,S),U(E,r,S),Ke(s,r,null),c(r,a),k&&k.m(r,null),U(E,d,S),Ke(o,E,S),U(E,u,S),U(E,N,S),Ke(m,N,null),c(N,w),v&&v.m(N,null),I=!0,D||(x=Y(window,"keydown",i[6]),D=!0)},p(E,[S]){Ae&&k.p(E,S);const O={};S&1&&(O.target=E[0]),S&2&&(O.played=E[1]),o.$set(O);const p={};S&1&&(p.target=E[0]),S&2&&(p.played=E[1]),S&4&&(p.guessState=E[2]),S&524288&&(p.$$scope={dirty:S,ctx:E}),m.$set(p),E[5]?v?v.p(E,S):(v=ut(E),v.c(),v.m(N,null)):v&&(v.d(1),v=null)},i(E){I||(me(s.$$.fragment,E),me(o.$$.fragment,E),me(m.$$.fragment,E),I=!0)},o(E){ue(s.$$.fragment,E),ue(o.$$.fragment,E),ue(m.$$.fragment,E),I=!1},d(E){E&&(y(e),y(n),y(r),y(d),y(u),y(N)),We(s),k&&k.d(),We(o,E),We(m),v&&v.d(),D=!1,x()}}}const ln=/^[A-G]$/,mt=/^[0-9]$/;function on(i,e,t){let n,r,s;le(i,Pe,p=>t(14,n=p)),le(i,Le,p=>t(15,r=p)),le(i,tt,p=>t(5,s=p));let a,d,o,u,N="",m="";At(()=>{x(),console.log(en("Db","major"))}),Ae.subscribe(p=>{p&&p.channels[1].addListener("noteon",w)});function w(p){if(o)return;console.log("noteon",p);const M=p.rawData;I(M[1],80)}function I(p,M){if(!n)t(1,d={...ae(p),value:p,correct:!1});else{t(0,a={...ae(n.current),value:n.current});const B=n.guess(p);t(2,u=B?"correct":"wrong"),t(1,d={...ae(p),value:p,correct:B}),o=setTimeout(()=>{n!=null&&n.ended?(t(0,a=void 0),t(2,u="ended")):n&&(t(2,u="waiting"),n.startTime(),n.type==="notes"?t(0,a={...ae(n.current),value:n.current}):(t(0,a=void 0),r==null||r.noteOn(n.current,80))),t(1,d=void 0),o=void 0},2e3)}r&&r.noteOn(p,M)}function D(p){if(s&&!o){const M=p.key.toUpperCase(),B=m.length===0,H=m.length===1,L=m.length===2;if(B&&ln.test(M))t(4,m=M),t(3,N="");else if(H&&M==="B")t(4,m+="♭");else if(H&&M==="S")t(4,m+="♯");else if(H&&mt.test(M)||L&&mt.test(M)){const re=_t(m+M);"data"in re?I(re.data,120):t(3,N=`Error: ${re.err}`),t(4,m="")}else p.key==="Backspace"&&!B&&t(4,m=m.slice(0,-1))}}async function x(){const p=await Me.openMidi();"data"in p?p.data.name:p.err}function k(p){if(p==="notes"){t(2,u="waiting");const M=Je.playGuessNotes(p),B=ae(M.current);t(0,a={...B,value:M.current})}else if(p==="pitches"){t(2,u="waiting");const M=Je.playGuessNotes(p);Me.setSound(!0),r==null||r.noteOn(M.current,80)}}function v(){k(n.type)}function E(){t(2,u="waiting"),Je.clearGame(),t(0,a=void 0),t(1,d=void 0)}return[a,d,u,N,m,s,D,k,v,E,()=>k("notes"),()=>k("pitches")]}class mn extends He{constructor(e){super(),Ve(this,e,on,an,Ge,{})}}export{mn as component};
