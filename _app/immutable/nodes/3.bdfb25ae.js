var ot=Object.defineProperty;var ct=(i,e,t)=>e in i?ot(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var ve=(i,e,t)=>(ct(i,typeof e!="symbol"?e+"":e,t),t);import{s as Be,f as Se,n as ge,r as st,e as Ee,h as Me,i as Ie,b as Fe,j as dt,o as ht}from"../chunks/scheduler.e80da8ef.js";import{S as Le,i as Ue,g as u,s as T,h as m,j as M,y as H,c as R,f as p,k as f,a as L,x as o,z as we,A as X,m as z,n as j,o as re,r as ze,u as je,v as Ye,d as qe,t as Ke,w as We,e as Je}from"../chunks/index.3d76737d.js";import{w as Ae}from"../chunks/index.7d157e8c.js";class Z{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==!0}addListener(e,t,n={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==Z.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof t!="function")throw new TypeError("The callback must be a function.");const r=new Qe(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return e===void 0?this.eventMap[Z.ANY_EVENT]&&this.eventMap[Z.ANY_EVENT].length>0?!0:Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[e]&&this.eventMap[e].length>0?t instanceof Qe?this.eventMap[e].filter(r=>r===t).length>0:typeof t=="function"?this.eventMap[e].filter(r=>r.callback===t).length>0:t==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(t=>{t.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[Z.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(s=>{if(s.suspended)return;let l=[...t];Array.isArray(s.arguments)&&(l=l.concat(s.arguments)),s.remaining>0&&(n.push(s.callback.apply(s.context,l)),s.count++),--s.remaining<1&&s.remove()}),n}removeListener(e,t,n={}){if(e===void 0){this.eventMap={};return}else if(!this.eventMap[e])return;let r=this.eventMap[e].filter(s=>t&&s.callback!==t||n.remaining&&n.remaining!==s.remaining||n.context&&n.context!==s.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let s,l=this.addListener(e,()=>{clearTimeout(s),n()},{remaining:1});t.duration!==1/0&&(s=setTimeout(()=>{l.remove(),r("The duration expired before the event was emitted.")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class Qe{constructor(e,t,n,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==Z.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments!==void 0&&!Array.isArray(r.arguments)&&(r.arguments=[r.arguments]),r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r),r.duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class a{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),a.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),a.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),a.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),a.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class me{constructor(e,t={}){this.duration=c.defaults.note.duration,this.attack=c.defaults.note.attack,this.release=c.defaults.note.release,t.duration!=null&&(this.duration=t.duration),t.attack!=null&&(this.attack=t.attack),t.rawAttack!=null&&(this.attack=d.from7bitToFloat(t.rawAttack)),t.release!=null&&(this.release=t.release),t.rawRelease!=null&&(this.release=d.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=d.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=d.getNoteDetails(e);if(c.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(c.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(c.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(c.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(c.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(c.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(c.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return d.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=d.from7bitToFloat(e)}get rawRelease(){return d.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=d.from7bitToFloat(e)}get number(){return d.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return c.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+e*12+t,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class d{static toNoteNumber(e,t=0){if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");const r={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let s=(n.octave+1+t)*12;if(s+=r[n.name],n.accidental&&(n.accidental.startsWith("b")?s-=n.accidental.length:s+=n.accidental.length),s<0||s>127)throw new RangeError("Invalid octaveOffset value");return s}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let s=t[2].toLowerCase();return s=s===""?void 0:s,{accidental:s,identifier:n+(s||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(c.validation){if(e==="all")t=["all"];else if(e==="none")return[]}return Array.isArray(e)?t=e:t=[e],t.indexOf("all")>-1&&(t=a.MIDI_CHANNEL_NUMBERS),t.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(e){let t=!1;const n=parseFloat(e);return isNaN(n)?!1:(typeof e=="string"&&e.substring(0,1)==="+"?n>=0&&(t=c.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if(typeof e=="string"||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch{return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=t==null?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=Math.floor(e/12-1)+t;return n[e%12]+r.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof me)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new me(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{n.push(this.buildNote(r,t))}),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(e*127),0),127)}static fromMsbLsbToFloat(e,t=0){c.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){c.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(e*16383);return{msb:t>>7,lsb:t&127}}static offsetNumber(e,t=0,n=0){if(c.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+t*12+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find(n=>e[n]===t)}static getCcNameByNumber(e){if(!(c.validation&&(e=parseInt(e),!(e>=0&&e<=127))))return a.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let t=a.CONTROL_CHANGE_MESSAGES.find(n=>n.name===e);return t?t.number:a.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in a.CHANNEL_MODE_MESSAGES)if(a.CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===a.CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&typeof window.document<"u"}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class ft extends Z{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(c.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=d.fromFloatTo7Bit(t));const r=c.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),d.buildNoteArray(e).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),s.getOffsetNumber(r),t],{time:d.toTimestamp(n.time)})}),this}sendControlChange(e,t,n={}){if(typeof e=="string"&&(e=d.getCcNumberByName(e)),Array.isArray(t)||(t=[t]),c.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(t=t.map(r=>{const s=Math.min(Math.max(parseInt(r),0),127);if(isNaN(s))throw new TypeError("Values must be integers between 0 and 127");return s}),t.length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach((r,s)=>{this.send([(a.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+s*32,t[s]],{time:d.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2?this:(this.sendControlChange(38,e[1],t),this)}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),c.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(a.REGISTERED_PARAMETERS).forEach(r=>{a.REGISTERED_PARAMETERS[r][0]===e[0]&&a.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),c.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(a.REGISTERED_PARAMETERS).forEach(r=>{a.REGISTERED_PARAMETERS[r][0]===e[0]&&a.REGISTERED_PARAMETERS[r][1]===e[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){this.sendNoteOn(e,t);const n=Array.isArray(e)?e:[e];for(let r of n)if(parseInt(r.duration)>0){const s={time:(d.toTimestamp(t.time)||c.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,s)}else if(parseInt(t.duration)>0){const s={time:(d.toTimestamp(t.time)||c.time)+parseInt(t.duration),release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(r,s)}return this}sendNoteOff(e,t={}){if(c.validation){if(t.rawRelease!=null&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(t.release!=null&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawRelease!=null?n=t.rawRelease:isNaN(t.release)||(n=Math.round(t.release*127));const r=c.octaveOffset+this.output.octaveOffset+this.octaveOffset;return d.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),s.getOffsetNumber(r),s.rawRelease],{time:d.toTimestamp(t.time)})}),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(c.validation){if(t.rawAttack!=null&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(t.attack!=null&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;t.rawAttack!=null?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(t.attack*127));const r=c.octaveOffset+this.output.octaveOffset+this.octaveOffset;return d.buildNoteArray(e,{rawAttack:n}).forEach(s=>{this.send([(a.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),s.getOffsetNumber(r),s.rawAttack],{time:d.toTimestamp(t.time)})}),this}sendChannelMode(e,t=0,n={}){if(typeof e=="string"&&(e=a.CHANNEL_MODE_MESSAGES[e]),c.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(a.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:d.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(c.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return t.rawValue||(e=d.fromFloatTo7Bit(e)),this.send([(a.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e)],{time:d.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,c.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let s=r>>7&127,l=r&127;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[s,l],t),this}sendModulationRange(e,t,n={}){if(c.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(t!=null&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),c.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(c.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const s=d.fromFloatToMsbLsb((e+1)/2);n=s.msb,r=s.lsb}return this.send([(a.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:d.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(c.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,c.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(a.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:d.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=a.REGISTERED_PARAMETERS[e]),c.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(c.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(c.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return e==="mono"?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Oe extends Z{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new ft(this,t);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:c.time};e.port.connection==="open"?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,t={time:0},n=0){if(e instanceof it&&(e=d.isNode?e.data:e.rawData),e instanceof Uint8Array&&d.isNode&&(e=Array.from(e)),c.validation){if(!Array.isArray(e)&&!(e instanceof Uint8Array)&&(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(r=parseInt(r),!(r>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),t||(t={time:0})}return this._midiOutput.send(e,d.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=a.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=a.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,a.SYSTEM_MESSAGES.sysexend);this.send([a.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():c.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(c.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([a.SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){e=Math.floor(e)||0;var n=e>>7&127,r=e&127;return this.send([a.SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(c.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([a.SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([a.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([a.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([a.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([a.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([a.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([a.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([a.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return c.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,t,n)}),this}sendControlChange(e,t,n={},r={}){if(c.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendControlChange(e,t,n)}),this}sendPitchBendRange(e=0,t=0,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,t,n)}),this}setPitchBendRange(e=0,t=0,n="all",r={}){return c.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(e,t,n)}),this}setRegisteredParameter(e,t=[],n="all",r={}){return c.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,t)}),this}sendPitchBend(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPitchBend(e,t)}),this}sendProgramChange(e=0,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendProgramChange(e,t)}),this}sendModulationRange(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(e,t,n)}),this}setModulationRange(e=0,t=0,n="all",r={}){return c.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendMasterTuning(e,t)}),this}setMasterTuning(e,t={},n={}){return c.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningProgram(e,t)}),this}setTuningProgram(e,t="all",n={}){return c.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendTuningBank(e,t)}),this}setTuningBank(e,t="all",n={}){return c.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(c.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;n=r,n.channels=s,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendChannelMode(e,t,n)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(e.channels).forEach(t=>{this.channels[t].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},t={}){if(c.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const n=e;e=t,e.channels=n,e.channels==="all"&&(e.channels=a.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,t)}),this}sendLocalControl(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendLocalControl(e,t)}),this}sendOmniMode(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendOmniMode(e,t)}),this}sendNrpnValue(e,t,n={}){return n.channels==null&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,t,n)}),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return c.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnIncrement(e,t)}),this}incrementRegisteredParameter(e,t="all",n={}){return c.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendRpnDecrement(e,t)}),this}decrementRegisteredParameter(e,t="all",n={}){return c.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,n.channels==="all"&&(n.channels=a.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOff(e,t)}),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(c.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].playNote(e,t)}),this}sendNoteOn(e,t={},n={}){if(c.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const r=t;t=n,t.channels=r,t.channels==="all"&&(t.channels=a.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(t.channels).forEach(r=>{this.channels[r].sendNoteOn(e,t)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Xe{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(a.SYSTEM_MESSAGES),...Object.keys(a.CHANNEL_MESSAGES)],this.channels=a.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),c.validation&&(e.forEach(n=>{if(!(n instanceof Oe))throw new TypeError("Destinations must be of type 'Output'.")}),t.types!==void 0&&t.types.forEach(n=>{if(!a.SYSTEM_MESSAGES.hasOwnProperty(n)&&!a.CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),t.channels!==void 0&&t.channels.forEach(n=>{if(!a.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(t=>{c.validation&&!(t instanceof Oe)||t.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class ut extends Z{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if(t.type==="noteoff"||t.type==="noteon"&&r===0)this.notesState[n]=!1,t.type="noteoff",t.note=new me(d.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+c.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=d.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if(t.type==="noteon")this.notesState[n]=!0,t.note=new me(d.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+c.octaveOffset),{rawAttack:r}),t.value=d.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if(t.type==="keyaftertouch")t.note=new me(d.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+c.octaveOffset)),t.value=d.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if(t.type==="controlchange"){t.controller={number:n,name:a.CONTROL_CHANGE_MESSAGES[n].name,description:a.CONTROL_CHANGE_MESSAGES[n].description,position:a.CONTROL_CHANGE_MESSAGES[n].position},t.subtype=t.controller.name||"controller"+n,t.value=d.from7bitToFloat(r),t.rawValue=r;const s=Object.assign({},t);s.type=`${t.type}-controller${n}`,delete s.subtype,this.emit(s.type,s);const l=Object.assign({},t);l.type=`${t.type}-`+a.CONTROL_CHANGE_MESSAGES[n].name,delete l.subtype,l.type.indexOf("controller")!==0&&this.emit(l.type,l),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else t.type==="programchange"?(t.value=n,t.rawValue=t.value):t.type==="channelaftertouch"?(t.value=d.from7bitToFloat(n),t.rawValue=n):t.type==="pitchbend"?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,t.type==="localcontrol"&&(t.value=t.message.data[2]===127,t.rawValue=t.message.data[2]),t.type==="omnimodeon"?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="omnimodeoff"&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),t.type==="monomodeon"?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):t.type==="polymodeon"&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1];t===99||t===101?(this._nrpnBuffer=[],this._rpnBuffer=[],t===99?this._nrpnBuffer=[e.message]:n!==127&&(this._rpnBuffer=[e.message])):t===98||t===100?t===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):(t===6||t===38||t===96||t===97)&&(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===6||e===38||e===96||e===97||e===98||e===99||e===100||e===101}_dispatchParameterNumberEvent(e,t,n,r){e=e==="nrpn"?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:d.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};e==="rpn"?s.parameter=Object.keys(a.REGISTERED_PARAMETERS).find(_=>a.REGISTERED_PARAMETERS[_][0]===t&&a.REGISTERED_PARAMETERS[_][1]===n):s.parameter=(t<<7)+n;const l=a.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;s.type=`${e}-${l}`,this.emit(s.type,s);const h=Object.assign({},s);h.type==="nrpn-dataincrement"?h.type="nrpn-databuttonincrement":h.type==="nrpn-datadecrement"?h.type="nrpn-databuttondecrement":h.type==="rpn-dataincrement"?h.type="rpn-databuttonincrement":h.type==="rpn-datadecrement"&&(h.type="rpn-databuttondecrement"),this.emit(h.type,h),s.type=e,s.subtype=l,this.emit(s.type,s)}getChannelModeByNumber(e){return c.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),d.getChannelModeByNumber(e)}getCcNameByNumber(e){if(c.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),e=parseInt(e),!(e>=0&&e<=127)))throw new RangeError("Invalid control change number.");return d.getCcNameByNumber(e)}getNoteState(e){e instanceof me&&(e=e.identifier);const t=d.guessNoteNumber(e,c.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class it{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=(this.statusByte&15)+1):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=d.getPropertyByValue(a.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=d.getPropertyByValue(a.SYSTEM_MESSAGES,this.command)),this.statusByte===a.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class mt extends Z{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let t=1;t<=16;t++)this.channels[t]=new ut(this,t);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:c.time,target:this,port:this};e.port.connection==="open"?(t.type="opened",this.emit("opened",t)):e.port.connection==="closed"&&e.port.state==="connected"?(t.type="closed",this.emit("closed",t)):e.port.connection==="closed"&&e.port.state==="disconnected"?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new it(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(t))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage",t.type==="songselect"&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){c.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(c.validation&&typeof n=="function"){let r=t!=null?[].concat(t):void 0;t=n,n={channels:r}}if(a.CHANNEL_EVENTS.includes(e)){n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS);let r=[];return d.sanitizeChannels(n.channels).forEach(s=>{r.push(this.channels[s].addListener(e,t,n))}),r}else return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(c.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}return a.CHANNEL_EVENTS.includes(e)?(n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS),d.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(e,t))):super.hasListener(e,t)}removeListener(e,t,n={}){if(c.validation&&typeof n=="function"){let r=[].concat(t);t=n,n={channels:r}}if(n.channels===void 0&&(n.channels=a.MIDI_CHANNEL_NUMBERS),e==null)return d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();a.CHANNEL_EVENTS.includes(e)?d.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(e,t,n)}):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return e instanceof Xe?n=e:n=new Xe(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter(t=>t!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return c.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class pt extends Z{constructor(){super(),this.defaults={note:{attack:d.from7bitToFloat(64),release:d.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(d.isNode){try{window.navigator}catch{let h=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)();global.navigator||(global.navigator={}),Object.assign(global.navigator,h)}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=e.validation!==!1,this.validation&&(typeof e=="function"&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return typeof e.callback=="function"&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{typeof e.requestMIDIAccessFunction=="function"?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(l){return n.error=l,this.emit("error",n),typeof e.callback=="function"&&e.callback(l),Promise.reject(l)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(l){return n.error=l,this.emit("error",n),typeof e.callback=="function"&&e.callback(l),Promise.reject(l)}return this.emit("enabled",s),typeof e.callback=="function"&&e.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(this._disconnectedInputs[n].id===e.toString())return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(this.inputs[n].id===e.toString())return this.inputs[n]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedInputs.length;n++)if(~this._disconnectedInputs[n].name.indexOf(e))return this._disconnectedInputs[n]}else for(let n=0;n<this.inputs.length;n++)if(~this.inputs[n].name.indexOf(e))return this.inputs[n]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(~this._disconnectedOutputs[n].name.indexOf(e))return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(~this.outputs[n].name.indexOf(e))return this.outputs[n]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let n=0;n<this._disconnectedOutputs.length;n++)if(this._disconnectedOutputs[n].id===e.toString())return this._disconnectedOutputs[n]}else for(let n=0;n<this.outputs.length;n++)if(this.outputs[n].id===e.toString())return this.outputs[n]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),d.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127?d.getNoteDetails(d.offsetNumber(e,this.octaveOffset)).octave:!1}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),d.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),d.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),d.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),d.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),d.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(t=>e.push(t.destroy())),this.outputs.forEach(t=>e.push(t.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if(e.port.state==="connected"&&e.port.connection==="open"){e.port.type==="output"?t.port=this.getOutputById(e.port.id):e.port.type==="input"&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if(e.port.state==="disconnected"&&e.port.connection==="pending"){e.port.type==="input"?t.port=this.getInputById(e.port.id,{disconnected:!0}):e.port.type==="output"&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const n=this._inputs[t];Array.from(this.interface.inputs.values()).find(s=>s===n._midiInput)||(this._disconnectedInputs.push(n),this._inputs.splice(t,1))}let e=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(n=>n._midiInput===t)){let n=this._disconnectedInputs.find(r=>r._midiInput===t);n||(n=new mt(t)),this._inputs.push(n),e.push(n.open())}}),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const n=this._outputs[t];Array.from(this.interface.outputs.values()).find(s=>s===n._midiOutput)||(this._disconnectedOutputs.push(n),this._outputs.splice(t,1))}let e=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(n=>n._midiOutput===t)){let n=this._disconnectedOutputs.find(r=>r._midiOutput===t);n||(n=new Oe(t)),this._outputs.push(n),e.push(n.open())}}),Promise.all(e)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),d.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),d.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&navigator.requestMIDIAccess}get sysexEnabled(){return!!(this.interface&&this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.8"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),a.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),a.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),a.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),a.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),a.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const c=new pt;c.constructor=null;function Et(i,e){try{const t=e==="local"?window.localStorage:window.sessionStorage;return{data:JSON.parse(t.getItem(i)||"")}}catch(t){return{err:`Failed to retrieve value from storage: ${t}`,code:400}}}function gt(i,e,t){try{return(t==="local"?window.localStorage:window.sessionStorage).setItem(e,JSON.stringify(i)),{data:void 0}}catch(n){return{err:`Failed to store the value: ${n}`,code:400}}}function bt(i,e){const{key:t,storage:n="local"}=e,r=Et(t,n);return"data"in r&&r.data?i.set(e.deserialize?e.deserialize(r.data):r.data):"err"in r&&(e!=null&&e.debug)&&console.info(r.err),i.subscribe(s=>{const l=gt(e.serialize?e.serialize(s):s,t,n);"err"in l&&(e!=null&&e.debug)&&console.error(l.err)}),i}const be=Ae(void 0),xe=bt(Ae([60,84]),{key:"midi-range",storage:"session"}),Pe=Ae(!1),Ce={async openMidi(){return c.enable().then(()=>c.inputs.length>0?(be.set(c.inputs[0]),{data:c.inputs[0]}):{err:"No MIDI device found.",code:400}).catch(i=>({err:i.toString(),code:403}))},setMidiRange(i){xe.set(i)},setUseKeyboard(i){Pe.set(i)}},at={0:{note:"C",steps:0,sharp:!1,flat:!1},1:{note:"C♯",steps:0,sharp:!0,flat:!1},2:{note:"D",steps:1,sharp:!1,flat:!1},3:{note:"E♭",steps:2,sharp:!1,flat:!0},4:{note:"E",steps:2,sharp:!1,flat:!1},5:{note:"F",steps:3,sharp:!1,flat:!1},6:{note:"F♯",steps:3,sharp:!0,flat:!1},7:{note:"G",steps:4,sharp:!1,flat:!1},8:{note:"G♯",steps:4,sharp:!0,flat:!1},9:{note:"A",steps:5,sharp:!1,flat:!1},10:{note:"B♭",steps:6,sharp:!1,flat:!0},11:{note:"B",steps:6,sharp:!1,flat:!1}};function te(i){const e=i-12,t=Math.floor(e/12),n=at[e%12];return{...n,octave:t,absolute:`${n.note}${t}`}}function lt(i){if(i.length===2||i.length===3){const e=i.slice(0,i.length-1).toUpperCase();let t;try{t=parseInt(i[i.length-1])}catch{return{err:`Couldn't parse note "${i}" octave`,code:400}}const n=Object.values(at).findIndex(r=>r.note===e);return n===-1?{err:`Note "${i}" not found in scale`,code:400}:{data:12+t*12+n}}else return{err:`Unrecognized note "${i}"`,code:400}}function Ze(i){let e,t;return{c(){e=u("div"),t=z(i[2]),this.h()},l(n){e=m(n,"DIV",{class:!0});var r=M(e);t=j(r,i[2]),r.forEach(p),this.h()},h(){f(e,"class","error svelte-haigqy")},m(n,r){L(n,e,r),o(e,t)},p(n,r){r&4&&re(t,n[2])},d(n){n&&p(e)}}}function _t(i){let e,t,n,r="MIDI",s,l,h,_,v="Device",w,I,A,O,D,b,P="Prompt",N,E,y,g="Range",C,B,k,se,V,pe="—",ie,x,oe,q,Y,W,ce="Use MIDI",K,$,ae=`<label class="font-bold" for="sound">Sound</label> <div class="my-1 flex"><input class="h-[20px]" id="sound" type="checkbox" checked="${!1}"/></div>`,J,F,S,ke="Keyboard",Te,de,ee,_e,Re,Ge,G=i[2]&&Ze(i);return{c(){e=u("div"),t=u("fieldset"),n=u("legend"),n.textContent=r,s=T(),l=u("div"),h=u("div"),_=u("label"),_.textContent=v,w=T(),I=u("input"),O=T(),D=u("div"),b=u("button"),b.textContent=P,N=T(),E=u("div"),y=u("label"),y.textContent=g,C=T(),B=u("div"),k=u("input"),se=T(),V=u("span"),V.textContent=pe,ie=T(),x=u("input"),oe=T(),q=u("div"),G&&G.c(),Y=T(),W=u("button"),W.textContent=ce,K=T(),$=u("div"),$.innerHTML=ae,J=T(),F=u("div"),S=u("label"),S.textContent=ke,Te=T(),de=u("div"),ee=u("input"),this.h()},l(U){e=m(U,"DIV",{class:!0});var Q=M(e);t=m(Q,"FIELDSET",{class:!0});var le=M(t);n=m(le,"LEGEND",{class:!0,"data-svelte-h":!0}),H(n)!=="svelte-dnpakp"&&(n.textContent=r),s=R(le),l=m(le,"DIV",{class:!0});var ne=M(l);h=m(ne,"DIV",{class:!0});var he=M(h);_=m(he,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),H(_)!=="svelte-crpa7y"&&(_.textContent=v),w=R(he),I=m(he,"INPUT",{class:!0,id:!0}),O=R(he),D=m(he,"DIV",{});var He=M(D);b=m(He,"BUTTON",{class:!0,"data-svelte-h":!0}),H(b)!=="svelte-r53s7o"&&(b.textContent=P),He.forEach(p),he.forEach(p),N=R(ne),E=m(ne,"DIV",{class:!0});var fe=M(E);y=m(fe,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),H(y)!=="svelte-10u0679"&&(y.textContent=g),C=R(fe),B=m(fe,"DIV",{class:!0});var ue=M(B);k=m(ue,"INPUT",{class:!0,id:!0}),se=R(ue),V=m(ue,"SPAN",{class:!0,"data-svelte-h":!0}),H(V)!=="svelte-91k20l"&&(V.textContent=pe),ie=R(ue),x=m(ue,"INPUT",{class:!0,id:!0}),ue.forEach(p),oe=R(fe),q=m(fe,"DIV",{});var Ne=M(q);G&&G.l(Ne),Y=R(Ne),W=m(Ne,"BUTTON",{class:!0,"data-svelte-h":!0}),H(W)!=="svelte-1elgafa"&&(W.textContent=ce),Ne.forEach(p),fe.forEach(p),K=R(ne),$=m(ne,"DIV",{class:!0,"data-svelte-h":!0}),H($)!=="svelte-1po95sj"&&($.innerHTML=ae),J=R(ne),F=m(ne,"DIV",{class:!0});var ye=M(F);S=m(ye,"LABEL",{class:!0,for:!0,"data-svelte-h":!0}),H(S)!=="svelte-1js269u"&&(S.textContent=ke),Te=R(ye),de=m(ye,"DIV",{class:!0});var Ve=M(de);ee=m(Ve,"INPUT",{class:!0,id:!0,type:!0}),Ve.forEach(p),ye.forEach(p),ne.forEach(p),le.forEach(p),Q.forEach(p),this.h()},h(){var U;f(n,"class","px-2 text-0A text-base"),f(_,"class","font-bold"),f(_,"for","device"),f(I,"class","my-1 w-50"),f(I,"id","device"),I.disabled=!0,I.value=A=((U=i[3])==null?void 0:U.name)??"No device",f(b,"class","btn primary"),f(h,"class","flex flex-col"),f(y,"class","font-bold"),f(y,"for","range_min"),f(k,"class","w-full"),f(k,"id","range_min"),f(V,"class","mx-4"),f(x,"class","w-full"),f(x,"id","range_max"),f(B,"class","my-1 flex w-full"),f(W,"class","btn primary"),f(E,"class","flex flex-col"),f($,"class","flex flex-col h-full"),f(S,"class","font-bold"),f(S,"for","keyboard"),f(ee,"class","h-[20px]"),f(ee,"id","keyboard"),f(ee,"type","checkbox"),ee.checked=i[4],f(de,"class","my-1 flex"),f(F,"class","flex flex-col h-full"),f(l,"class","midi-body svelte-haigqy"),f(t,"class","flex flex-col rounded border-2 px-4 py-2 my-4 text-sm"),f(e,"class",_e=Se(`${i[7].class||""}`)+" svelte-haigqy")},m(U,Q){L(U,e,Q),o(e,t),o(t,n),o(t,s),o(t,l),o(l,h),o(h,_),o(h,w),o(h,I),o(h,O),o(h,D),o(D,b),o(l,N),o(l,E),o(E,y),o(E,C),o(E,B),o(B,k),we(k,i[0]),o(B,se),o(B,V),o(B,ie),o(B,x),we(x,i[1]),o(E,oe),o(E,q),G&&G.m(q,null),o(q,Y),o(q,W),o(l,K),o(l,$),o(l,J),o(l,F),o(F,S),o(F,Te),o(F,de),o(de,ee),Re||(Ge=[X(b,"click",Ce.openMidi),X(k,"input",i[8]),X(k,"change",i[9]),X(x,"input",i[10]),X(x,"change",i[11]),X(W,"click",Nt),X(ee,"change",i[6])],Re=!0)},p(U,[Q]){var le;Q&8&&A!==(A=((le=U[3])==null?void 0:le.name)??"No device")&&I.value!==A&&(I.value=A),Q&1&&k.value!==U[0]&&we(k,U[0]),Q&2&&x.value!==U[1]&&we(x,U[1]),U[2]?G?G.p(U,Q):(G=Ze(U),G.c(),G.m(q,Y)):G&&(G.d(1),G=null),Q&16&&(ee.checked=U[4]),Q&128&&_e!==(_e=Se(`${U[7].class||""}`)+" svelte-haigqy")&&f(e,"class",_e)},i:ge,o:ge,d(U){U&&p(e),G&&G.d(),Re=!1,st(Ge)}}}function Nt(){}function yt(i,e,t){let n,r,s;Ee(i,xe,b=>t(12,n=b)),Ee(i,be,b=>t(3,r=b)),Ee(i,Pe,b=>t(4,s=b));let l=te(n[0]).absolute,h=te(n[1]).absolute,_="";function v(b,P){const N=lt(P.currentTarget.value);if("data"in N){const E=n,y=[b==="min"?N.data:E[0],b==="max"?N.data:E[1]];Ce.setMidiRange(y),t(2,_="")}else t(2,_=N.err),b==="min"?t(0,l=te(n[0]).absolute):t(1,h=te(n[1]).absolute)}function w(b){Ce.setUseKeyboard(b.currentTarget.checked)}function I(){l=this.value,t(0,l)}const A=b=>v("min",b);function O(){h=this.value,t(1,h)}const D=b=>v("max",b);return i.$$set=b=>{t(7,e=Me(Me({},e),Ie(b)))},e=Ie(e),[l,h,_,r,s,v,w,e,I,A,O,D]}class vt extends Le{constructor(e){super(),Ue(this,e,yt,_t,Be,{})}}function wt(i){let e,t,n,r,s,l,h,_,v,w,I,A,O,D,b,P,N,E,y,g,C,B,k,se,V,pe="𝄞",ie,x,oe="𝄢",q,Y,W='<div class="note-contents"></div> <div class="ledger-line svelte-11g762w"></div>',ce,K,$='<div class="note-contents"></div> <div class="ledger-line svelte-11g762w"></div>',ae;return{c(){e=u("section"),t=u("div"),n=u("div"),r=T(),s=u("div"),l=T(),h=u("div"),_=T(),v=u("div"),w=T(),I=u("div"),A=T(),O=u("div"),D=T(),b=u("div"),P=T(),N=u("div"),E=T(),y=u("div"),g=T(),C=u("div"),B=T(),k=u("div"),se=T(),V=u("span"),V.textContent=pe,ie=T(),x=u("span"),x.textContent=oe,q=T(),Y=u("div"),Y.innerHTML=W,ce=T(),K=u("div"),K.innerHTML=$,this.h()},l(J){e=m(J,"SECTION",{class:!0});var F=M(e);t=m(F,"DIV",{class:!0});var S=M(t);n=m(S,"DIV",{class:!0}),M(n).forEach(p),r=R(S),s=m(S,"DIV",{class:!0}),M(s).forEach(p),l=R(S),h=m(S,"DIV",{class:!0}),M(h).forEach(p),_=R(S),v=m(S,"DIV",{class:!0}),M(v).forEach(p),w=R(S),I=m(S,"DIV",{class:!0}),M(I).forEach(p),A=R(S),O=m(S,"DIV",{class:!0}),M(O).forEach(p),D=R(S),b=m(S,"DIV",{class:!0}),M(b).forEach(p),P=R(S),N=m(S,"DIV",{class:!0}),M(N).forEach(p),E=R(S),y=m(S,"DIV",{class:!0}),M(y).forEach(p),g=R(S),C=m(S,"DIV",{class:!0}),M(C).forEach(p),B=R(S),k=m(S,"DIV",{class:!0}),M(k).forEach(p),se=R(S),V=m(S,"SPAN",{class:!0,"data-svelte-h":!0}),H(V)!=="svelte-19670ev"&&(V.textContent=pe),ie=R(S),x=m(S,"SPAN",{class:!0,"data-svelte-h":!0}),H(x)!=="svelte-119te60"&&(x.textContent=oe),q=R(S),Y=m(S,"DIV",{class:!0,"data-svelte-h":!0}),H(Y)!=="svelte-1avvn9p"&&(Y.innerHTML=W),ce=R(S),K=m(S,"DIV",{class:!0,"data-svelte-h":!0}),H(K)!=="svelte-1rv4bt9"&&(K.innerHTML=$),S.forEach(p),F.forEach(p),this.h()},h(){f(n,"class","line svelte-11g762w"),f(s,"class","line svelte-11g762w"),f(h,"class","line svelte-11g762w"),f(v,"class","line svelte-11g762w"),f(I,"class","line svelte-11g762w"),f(O,"class","line invisible svelte-11g762w"),f(b,"class","line svelte-11g762w"),f(N,"class","line svelte-11g762w"),f(y,"class","line svelte-11g762w"),f(C,"class","line svelte-11g762w"),f(k,"class","line svelte-11g762w"),f(V,"class","g-clef svelte-11g762w"),f(x,"class","f-clef svelte-11g762w"),f(Y,"class","note target svelte-11g762w"),f(K,"class","note played svelte-11g762w"),f(t,"class","staff svelte-11g762w"),f(e,"class",ae=Se(`${i[2].class||""} score pt-12 pb-8`)+" svelte-11g762w")},m(J,F){L(J,e,F),o(e,t),o(t,n),o(t,r),o(t,s),o(t,l),o(t,h),o(t,_),o(t,v),o(t,w),o(t,I),o(t,A),o(t,O),o(t,D),o(t,b),o(t,P),o(t,N),o(t,E),o(t,y),o(t,g),o(t,C),o(t,B),o(t,k),o(t,se),o(t,V),o(t,ie),o(t,x),o(t,q),o(t,Y),i[5](Y),o(t,ce),o(t,K),i[6](K)},p(J,[F]){F&4&&ae!==(ae=Se(`${J[2].class||""} score pt-12 pb-8`)+" svelte-11g762w")&&f(e,"class",ae)},i:ge,o:ge,d(J){J&&p(e),i[5](null),i[6](null)}}}function $e(i,e,t){e?(i.style.display="block",i.style.bottom=St(e)+"rem",i.firstChild&&(i.firstChild.textContent=`${e.flat?"♭":e.sharp?"♯":""}𝅝`),t!==void 0&&t?(i.classList.remove("wrong"),i.classList.add("correct")):t!==void 0&&(i.classList.remove("correct"),i.classList.add("wrong")),(e.value===60||e.value===61)&&i.lastChild instanceof HTMLElement||e.value===81&&i.lastChild instanceof HTMLElement?(i.lastChild.style.display="block",e.flat||e.sharp?i.lastChild.style.left="1.18rem":i.lastChild.style.left=""):i.lastChild instanceof HTMLElement&&(i.lastChild.style.display="none")):i.style.display="none"}function St(i){const e=.42272727272,n=(i.octave-4)*7+i.steps;return 2.85+e*n}function Mt(i,e,t){let{target:n=void 0,played:r=void 0}=e,s,l;function h(v){Fe[v?"unshift":"push"](()=>{l=v,t(1,l)})}function _(v){Fe[v?"unshift":"push"](()=>{s=v,t(0,s)})}return i.$$set=v=>{t(2,e=Me(Me({},e),Ie(v))),"target"in v&&t(3,n=v.target),"played"in v&&t(4,r=v.played)},i.$$.update=()=>{i.$$.dirty&10&&l&&$e(l,n),i.$$.dirty&17&&s&&$e(s,r,r==null?void 0:r.correct)},e=Ie(e),[s,l,e,n,r,h,_]}class It extends Le{constructor(e){super(),Ue(this,e,Mt,wt,Be,{target:3,played:4})}}class Ct{constructor(e){ve(this,"notes");ve(this,"correct",0);ve(this,"idx",0);this.notes=e}get current(){return this.notes[this.idx]}get ended(){return this.notes.length===this.idx+1}guess(e){const t=this.current===e;return t&&(this.correct+=1),this.idx+=1,t}}const De=Ae(void 0),et={playGuessNotes(i=10){const e=[],t=dt(xe);console.log("range",t);for(let r=0;r<i;r+=1){let s=0,l=t[1];for(;s<5;)s+=1,l=t[0]+Math.floor(Math.random()*(t[1]-t[0])),e.includes(l)||(s=5);e.push(l)}const n=new Ct(e);return De.set(n),n},clearGame(){De.set(void 0)}};function At(i){let e,t,n="Guess 10 Notes",r,s;return{c(){e=u("div"),t=u("button"),t.textContent=n,this.h()},l(l){e=m(l,"DIV",{});var h=M(e);t=m(h,"BUTTON",{class:!0,"data-svelte-h":!0}),H(t)!=="svelte-i90cmu"&&(t.textContent=n),h.forEach(p),this.h()},h(){f(t,"class","btn primary")},m(l,h){L(l,e,h),o(e,t),r||(s=X(t,"click",i[8]),r=!0)},p:ge,d(l){l&&p(e),r=!1,s()}}}function Tt(i){let e,t=i[1]&&tt(i);return{c(){e=u("div"),t&&t.c(),this.h()},l(n){e=m(n,"DIV",{class:!0});var r=M(e);t&&t.l(r),r.forEach(p),this.h()},h(){f(e,"class","objective svelte-1dxpmgm")},m(n,r){L(n,e,r),t&&t.m(e,null)},p(n,r){n[1]?t?t.p(n,r):(t=tt(n),t.c(),t.m(e,null)):t&&(t.d(1),t=null)},d(n){n&&p(e),t&&t.d()}}}function Rt(i){let e;function t(s,l){if(s[2]==="correct"||s[2]==="wrong")return Dt;if(s[2]==="ended")return Ot}let n=t(i),r=n&&n(i);return{c(){e=u("div"),r&&r.c(),this.h()},l(s){e=m(s,"DIV",{class:!0});var l=M(e);r&&r.l(l),l.forEach(p),this.h()},h(){f(e,"class","objective svelte-1dxpmgm")},m(s,l){L(s,e,l),r&&r.m(e,null)},p(s,l){n===(n=t(s))&&r?r.p(s,l):(r&&r.d(1),r=n&&n(s),r&&(r.c(),r.m(e,null)))},d(s){s&&p(e),r&&r.d()}}}function tt(i){let e,t,n=i[1].absolute+"",r;return{c(){e=u("div"),t=z("Played: "),r=z(n)},l(s){e=m(s,"DIV",{});var l=M(e);t=j(l,"Played: "),r=j(l,n),l.forEach(p)},m(s,l){L(s,e,l),o(e,t),o(e,r)},p(s,l){l&2&&n!==(n=s[1].absolute+"")&&re(r,n)},d(s){s&&p(e)}}}function Ot(i){let e,t,n,r=i[6].correct+"",s,l,h=i[6].notes.length+"",_,v,w,I,A="Try Again",O,D,b="Clear",P,N;return{c(){e=u("div"),t=u("div"),n=z("Result: "),s=z(r),l=z(" / "),_=z(h),v=T(),w=u("div"),I=u("button"),I.textContent=A,O=T(),D=u("button"),D.textContent=b,this.h()},l(E){e=m(E,"DIV",{});var y=M(e);t=m(y,"DIV",{});var g=M(t);n=j(g,"Result: "),s=j(g,r),l=j(g," / "),_=j(g,h),g.forEach(p),v=R(y),w=m(y,"DIV",{});var C=M(w);I=m(C,"BUTTON",{class:!0,"data-svelte-h":!0}),H(I)!=="svelte-16ds756"&&(I.textContent=A),O=R(C),D=m(C,"BUTTON",{class:!0,"data-svelte-h":!0}),H(D)!=="svelte-11mnk9v"&&(D.textContent=b),C.forEach(p),y.forEach(p),this.h()},h(){f(I,"class","btn primary"),f(D,"class","btn primary")},m(E,y){L(E,e,y),o(e,t),o(t,n),o(t,s),o(t,l),o(t,_),o(e,v),o(e,w),o(w,I),o(w,O),o(w,D),P||(N=[X(I,"click",i[8]),X(D,"click",i[9])],P=!0)},p(E,y){y&64&&r!==(r=E[6].correct+"")&&re(s,r),y&64&&h!==(h=E[6].notes.length+"")&&re(_,h)},d(E){E&&p(e),P=!1,st(N)}}}function Dt(i){var w,I;let e,t,n=((w=i[0])==null?void 0:w.absolute)+"",r,s,l,h,_=((I=i[1])==null?void 0:I.absolute)+"",v;return{c(){e=u("div"),t=z("Target: "),r=z(n),s=T(),l=u("div"),h=z("Played: "),v=z(_),this.h()},l(A){e=m(A,"DIV",{});var O=M(e);t=j(O,"Target: "),r=j(O,n),O.forEach(p),s=R(A),l=m(A,"DIV",{class:!0});var D=M(l);h=j(D,"Played: "),v=j(D,_),D.forEach(p),this.h()},h(){f(l,"class","ml-8")},m(A,O){L(A,e,O),o(e,t),o(e,r),L(A,s,O),L(A,l,O),o(l,h),o(l,v)},p(A,O){var D,b;O&1&&n!==(n=((D=A[0])==null?void 0:D.absolute)+"")&&re(r,n),O&2&&_!==(_=((b=A[1])==null?void 0:b.absolute)+"")&&re(v,_)},d(A){A&&(p(e),p(s),p(l))}}}function nt(i){let e;function t(s,l){if(s[3])return Lt;if(s[4])return Bt}let n=t(i),r=n&&n(i);return{c(){r&&r.c(),e=Je()},l(s){r&&r.l(s),e=Je()},m(s,l){r&&r.m(s,l),L(s,e,l)},p(s,l){n===(n=t(s))&&r?r.p(s,l):(r&&r.d(1),r=n&&n(s),r&&(r.c(),r.m(e.parentNode,e)))},d(s){s&&p(e),r&&r.d(s)}}}function Bt(i){let e,t,n;return{c(){e=u("div"),t=z("Input: "),n=z(i[4])},l(r){e=m(r,"DIV",{});var s=M(e);t=j(s,"Input: "),n=j(s,i[4]),s.forEach(p)},m(r,s){L(r,e,s),o(e,t),o(e,n)},p(r,s){s&16&&re(n,r[4])},d(r){r&&p(e)}}}function Lt(i){let e,t;return{c(){e=u("div"),t=z(i[3])},l(n){e=m(n,"DIV",{});var r=M(e);t=j(r,i[3]),r.forEach(p)},m(n,r){L(n,e,r),o(e,t)},p(n,r){r&8&&re(t,n[3])},d(n){n&&p(e)}}}function Ut(i){let e,t="MIDI Music Notation Trainer",n,r,s,l,h,_,v,w,I,A,O,D;s=new vt({});let b=be&&At(i);_=new It({props:{class:"px-4 md:px-0",target:i[0],played:i[1]}});function P(g,C){return g[6]?Rt:Tt}let N=P(i),E=N(i),y=i[5]&&nt(i);return{c(){e=u("h1"),e.textContent=t,n=T(),r=u("section"),ze(s.$$.fragment),l=T(),b&&b.c(),h=T(),ze(_.$$.fragment),v=T(),w=u("section"),E.c(),I=T(),y&&y.c(),this.h()},l(g){e=m(g,"H1",{class:!0,"data-svelte-h":!0}),H(e)!=="svelte-jm0jbv"&&(e.textContent=t),n=R(g),r=m(g,"SECTION",{class:!0});var C=M(r);je(s.$$.fragment,C),l=R(C),b&&b.l(C),C.forEach(p),h=R(g),je(_.$$.fragment,g),v=R(g),w=m(g,"SECTION",{class:!0});var B=M(w);E.l(B),I=R(B),y&&y.l(B),B.forEach(p),this.h()},h(){f(e,"class","my-8 md:text-5xl mt-12 px-4 md:px-0 text-3xl font-cursive tracking-tight"),f(r,"class","px-4 md:px-0"),f(w,"class","px-4 md:px-0")},m(g,C){L(g,e,C),L(g,n,C),L(g,r,C),Ye(s,r,null),o(r,l),b&&b.m(r,null),L(g,h,C),Ye(_,g,C),L(g,v,C),L(g,w,C),E.m(w,null),o(w,I),y&&y.m(w,null),A=!0,O||(D=X(window,"keydown",i[7]),O=!0)},p(g,[C]){be&&b.p(g,C);const B={};C&1&&(B.target=g[0]),C&2&&(B.played=g[1]),_.$set(B),N===(N=P(g))&&E?E.p(g,C):(E.d(1),E=N(g),E&&(E.c(),E.m(w,I))),g[5]?y?y.p(g,C):(y=nt(g),y.c(),y.m(w,null)):y&&(y.d(1),y=null)},i(g){A||(qe(s.$$.fragment,g),qe(_.$$.fragment,g),A=!0)},o(g){Ke(s.$$.fragment,g),Ke(_.$$.fragment,g),A=!1},d(g){g&&(p(e),p(n),p(r),p(h),p(v),p(w)),We(s),b&&b.d(),We(_,g),E.d(),y&&y.d(),O=!1,D()}}}const xt=/^[A-G]$/,rt=/^[0-9]$/;function Pt(i,e,t){let n,r;Ee(i,Pe,N=>t(5,n=N)),Ee(i,De,N=>t(6,r=N));let s,l,h,_,v="",w="";ht(()=>{D()}),be.subscribe(N=>{N&&N.channels[1].addListener("noteon",I)});function I(N){if(h)return;console.log("noteon",N);const E=N.rawData;A(E[1])}function A(N){if(!r)t(1,l={...te(N),value:N,correct:!1});else{t(0,s={...te(r.current),value:r.current});const E=r.guess(N);t(2,_=E?"correct":"wrong"),t(1,l={...te(N),value:N,correct:E}),h=setTimeout(()=>{r!=null&&r.ended?(t(0,s=void 0),t(2,_="ended")):r&&(t(0,s={...te(r.current),value:r.current}),t(2,_="waiting")),t(1,l=void 0),h=void 0},2e3)}}function O(N){if(n){const E=N.key.toUpperCase(),y=w.length===0,g=w.length===1,C=w.length===2;if(y&&xt.test(E))t(4,w=E),t(3,v="");else if(g&&E==="B")t(4,w+="♭");else if(g&&E==="S")t(4,w+="♯");else if(g&&rt.test(E)||C&&rt.test(E)){const B=lt(w+E);"data"in B?A(B.data):t(3,v=`Error: ${B.err}`),t(4,w="")}}}async function D(){const N=await Ce.openMidi();"data"in N?N.data.name:N.err}function b(){t(2,_="waiting");const N=et.playGuessNotes(),E=te(N.current);t(0,s={...E,value:N.current})}function P(){t(2,_="waiting"),et.clearGame()}return[s,l,_,v,w,n,r,O,b,P]}class Ft extends Le{constructor(e){super(),Ue(this,e,Pt,Ut,Be,{})}}export{Ft as component};
